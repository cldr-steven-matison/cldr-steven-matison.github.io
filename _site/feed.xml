<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://cldr-steven-matison.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://cldr-steven-matison.github.io//" rel="alternate" type="text/html" /><updated>2024-08-16T09:53:28-04:00</updated><id>https://cldr-steven-matison.github.io//feed.xml</id><title type="html">Cloudera Solutions Engineer</title><subtitle>Solutions Engineer @Cloudera</subtitle><author><name>Steven Matison</name></author><entry><title type="html">Installing Cloudera CFM Kubernetes Operator</title><link href="https://cldr-steven-matison.github.io//blog/Install-CFM-Operator/" rel="alternate" type="text/html" title="Installing Cloudera CFM Kubernetes Operator" /><published>2024-08-16T00:00:00-04:00</published><updated>2024-08-16T00:00:00-04:00</updated><id>https://cldr-steven-matison.github.io//blog/Install%20CFM%20Operator</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/Install-CFM-Operator/"><![CDATA[<p>Last week I had a chance to work out the installation of the Clouderaâ€™s CFM Operator.  In this post I am going to expose the lessons learned and command required to get this CFM Operator running on my macbook with <a href="https://minikube.sigs.k8s.io/docs/start/">MiniKube</a>.  Keep in mind, these Operators are GA for RedHat Openshift. This demonstration on how to locally install is for evaluation purposes and not meant for actual usage.</p>

<figure>
  <img src="/assets/images/cfm-op-deployment-architecture.jpg" />
  <figcaption>CFM Deployment Architecture</figcaption>
</figure>

<p>First, lets start with the main page for the CFM Operator:</p>

<p><a href="https://docs.cloudera.com/cfm-operator/2.8.0/index.html">CFM Operator 2.8</a></p>

<p>Next lets take a look at some requirements:</p>

<ol>
  <li>Install Docker</li>
  <li>Install MiniKube</li>
  <li>Install Helm</li>
  <li>Install cfmctl</li>
</ol>

<p>Now, onto the installation pages for detailed steps and instructions:</p>

<ol>
  <li><a href="https://docs.cloudera.com/cfm-operator/2.8.0/installation/topics/cfm-op-install-overview.html">Installing CFM Operator</a></li>
  <li><a href="https://docs.cloudera.com/cfm-operator/2.8.0/nifi-deployment-configuration/topics/cfm-op-deploy-nifi-cluster.html">Installing Apache Nifi</a></li>
  <li><a href="https://docs.cloudera.com/cfm-operator/2.8.0/registry-deployment-configuration/topics/cfm-op-nifi-registry-deployment.html">Installing Apache NiFi Registry</a></li>
</ol>

<p>All the commands for this learning session are as follows:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">minikube</span> <span class="n">start</span>
<span class="n">helm</span> <span class="n">install</span> <span class="p">\\</span>
  <span class="n">cert</span><span class="o">-</span><span class="n">manager</span> <span class="n">jetstack</span><span class="o">/</span><span class="n">cert</span><span class="o">-</span><span class="n">manager</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">namespace</span> <span class="n">cert</span><span class="o">-</span><span class="n">manager</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">create</span><span class="o">-</span><span class="n">namespace</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">version</span> <span class="n">v1</span><span class="o">.</span><span class="mf">15.2</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">set</span> <span class="n">crds</span><span class="p">.</span><span class="nf">enabled</span><span class="o">=</span><span class="kp">true</span>
<span class="n">kubectl</span> <span class="n">create</span> <span class="n">namespace</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="nb">system</span>
<span class="n">kubectl</span> <span class="n">create</span> <span class="n">secret</span> <span class="n">docker</span><span class="o">-</span><span class="n">registry</span> <span class="n">docker</span><span class="o">-</span><span class="n">pull</span><span class="o">-</span><span class="n">secret</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">namespace</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="nb">system</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">docker</span><span class="o">-</span><span class="n">server</span> <span class="n">container</span><span class="p">.</span><span class="nf">repository</span><span class="p">.</span><span class="nf">cloudera</span><span class="p">.</span><span class="nf">com</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">docker</span><span class="o">-</span><span class="n">username</span> <span class="p">[</span><span class="no">License</span> <span class="no">Username</span><span class="p">]</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">docker</span><span class="o">-</span><span class="n">password</span> <span class="p">[</span><span class="no">License</span> <span class="no">Password</span><span class="p">]</span>
<span class="p">.</span><span class="nf">/</span><span class="n">cfmctl</span> <span class="n">install</span> <span class="o">--</span><span class="n">license</span> <span class="p">.</span><span class="nf">/</span><span class="n">license</span><span class="p">.</span><span class="nf">txt</span> <span class="o">--</span><span class="n">image</span><span class="o">-</span><span class="n">repository</span> <span class="s2">"container.repository.cloudera.com/cloudera/cfm-operator"</span> <span class="o">--</span><span class="n">image</span><span class="o">-</span><span class="n">tag</span> <span class="s2">"2.8.0-b94"</span> <span class="o">--</span><span class="n">namespace</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="nb">system</span>
<span class="n">kubectl</span> <span class="n">create</span> <span class="n">namespace</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="n">cluster</span>
<span class="n">kubectl</span> <span class="n">create</span> <span class="n">secret</span> <span class="n">docker</span><span class="o">-</span><span class="n">registry</span> <span class="n">docker</span><span class="o">-</span><span class="n">pull</span><span class="o">-</span><span class="n">secret</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">namespace</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="n">cluster</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">docker</span><span class="o">-</span><span class="n">server</span> <span class="n">container</span><span class="p">.</span><span class="nf">repository</span><span class="p">.</span><span class="nf">cloudera</span><span class="p">.</span><span class="nf">com</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">docker</span><span class="o">-</span><span class="n">username</span> <span class="p">[</span><span class="no">License</span> <span class="no">Username</span><span class="p">]</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">docker</span><span class="o">-</span><span class="n">password</span> <span class="p">[</span><span class="no">License</span> <span class="no">Password</span><span class="p">]</span>
<span class="n">kubectl</span> <span class="n">apply</span> <span class="o">-</span><span class="n">f</span> <span class="n">nifi</span><span class="p">.</span><span class="nf">yaml</span> <span class="o">--</span><span class="n">namespace</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="n">cluster</span>
</code></pre></div></div>

<p>The source of my nifi.yaml:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="ss">apiVersion: </span><span class="n">cfm</span><span class="p">.</span><span class="nf">cloudera</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">v1alpha1</span>
<span class="ss">kind: </span><span class="no">Nifi</span>
<span class="ss">metadata:
  name: </span><span class="n">mynifi</span>
<span class="ss">spec:
  replicas: </span><span class="mi">1</span>
  <span class="ss">image:
    repository: </span><span class="n">container</span><span class="p">.</span><span class="nf">repository</span><span class="p">.</span><span class="nf">cloudera</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">cloudera</span><span class="o">/</span><span class="n">cfm</span><span class="o">-</span><span class="n">nifi</span><span class="o">-</span><span class="n">k8s</span>
    <span class="ss">tag: </span><span class="mf">2.8</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">b94</span><span class="o">-</span><span class="n">nifi_1</span><span class="o">.</span><span class="mf">25.0</span><span class="o">.</span><span class="mf">2.3</span><span class="o">.</span><span class="mf">13.0</span><span class="o">-</span><span class="mi">36</span>
    <span class="ss">pullSecret: </span><span class="n">docker</span><span class="o">-</span><span class="n">pull</span><span class="o">-</span><span class="n">secret</span>
  <span class="ss">tiniImage:
    repository: </span><span class="n">container</span><span class="p">.</span><span class="nf">repository</span><span class="p">.</span><span class="nf">cloudera</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">cloudera</span><span class="o">/</span><span class="n">cfm</span><span class="o">-</span><span class="n">tini</span>
    <span class="ss">tag: </span><span class="mf">2.8</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">b94</span>
    <span class="ss">pullSecret: </span><span class="n">docker</span><span class="o">-</span><span class="n">pull</span><span class="o">-</span><span class="n">secret</span>
  <span class="ss">hostName: </span><span class="n">mynifi</span><span class="p">.</span><span class="nf">localhost</span>
  <span class="ss">uiConnection:
    type: </span><span class="no">Ingress</span>
  <span class="ss">configOverride:
    nifiProperties:
      upsert:
        </span><span class="n">nifi</span><span class="p">.</span><span class="nf">cluster</span><span class="p">.</span><span class="nf">leader</span><span class="p">.</span><span class="nf">election</span><span class="p">.</span><span class="nf">implementation</span><span class="p">:</span> <span class="s2">"KubernetesLeaderElectionManager"</span>
    <span class="ss">authorizers: </span><span class="o">|</span>
      <span class="o">&lt;</span><span class="n">authorizers</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="n">authorizer</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="n">identifier</span><span class="o">&gt;</span><span class="n">single</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">authorizer</span><span class="o">&lt;</span><span class="sr">/identifier&gt;
          &lt;class&gt;org.apache.nifi.authorization.single.user.SingleUserAuthorizer&lt;/</span><span class="k">class</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="sr">/authorizer&gt;
      &lt;/</span><span class="n">authorizers</span><span class="o">&gt;</span>
    <span class="ss">loginIdentityProviders: </span><span class="o">|</span>
      <span class="o">&lt;</span><span class="n">loginIdentityProviders</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="n">provider</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="n">identifier</span><span class="o">&gt;</span><span class="n">single</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">provider</span><span class="o">&lt;</span><span class="sr">/identifier&gt;
          &lt;class&gt;org.apache.nifi.authentication.single.user.SingleUserLoginIdentityProvider&lt;/</span><span class="k">class</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="n">property</span> <span class="nb">name</span><span class="o">=</span><span class="s2">"Username"</span><span class="o">&gt;</span><span class="n">admin</span><span class="o">&lt;</span><span class="sr">/property&gt;
          &lt;property name="Password"&gt;$2b$10$GRa8g9Z5rBENXPFNHFBosev9XmY6CSk0SdcBi5sQMRX92KD73asGG&lt;/</span><span class="n">property</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="sr">/provider&gt;
      &lt;/</span><span class="n">loginIdentityProviders</span><span class="o">&gt;</span>
  <span class="ss">stateManagement:
   clusterProvider:
     id: </span><span class="n">kubernetes</span><span class="o">-</span><span class="n">provider</span>
     <span class="ss">class: </span><span class="n">org</span><span class="p">.</span><span class="nf">apache</span><span class="p">.</span><span class="nf">nifi</span><span class="p">.</span><span class="nf">kubernetes</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">provider</span><span class="o">.</span><span class="no">KubernetesConfigMapStateProvider</span>

</code></pre></div></div>

<p>Check out some commands I needed to see what was happening during install:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kubectl</span> <span class="n">get</span> <span class="n">pods</span> <span class="o">--</span><span class="n">all</span><span class="o">-</span><span class="n">namespaces</span>
<span class="n">kubectl</span> <span class="n">get</span> <span class="n">pods</span> <span class="o">--</span><span class="n">all</span><span class="o">-</span><span class="n">namespaces</span> <span class="o">-</span><span class="n">o</span> <span class="n">wide</span>
<span class="n">kubectl</span> <span class="n">describe</span> <span class="n">pod</span> <span class="n">mynifi</span><span class="o">-</span><span class="mi">0</span> <span class="o">-</span><span class="n">n</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="n">cluster</span>
<span class="n">kubectl</span> <span class="n">logs</span> <span class="o">-</span><span class="n">n</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="nb">system</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="mi">664598</span><span class="n">bf69</span><span class="o">-</span><span class="n">rm2lx</span>
<span class="n">kubectl</span> <span class="n">get</span> <span class="n">events</span> <span class="o">-</span><span class="n">n</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span>
<span class="n">kubectl</span> <span class="n">get</span> <span class="n">events</span> <span class="o">-</span><span class="n">n</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="nb">system</span>
<span class="n">kubectl</span> <span class="n">get</span> <span class="n">events</span> <span class="o">-</span><span class="n">n</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="n">cluster</span>
<span class="n">kubectl</span> <span class="n">get</span> <span class="n">secrets</span> <span class="o">-</span><span class="n">n</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="nb">system</span>
</code></pre></div></div>

<p>Things to watch out for:</p>

<ol>
  <li>When copy/pasting commands make sure you fix return lines and \ syntax.</li>
  <li>Be sure to get your correct License Username and Password with proper entitlements for these operators.</li>
  <li>Allocate enough resources for your kubernetes cluster in docker. Recommend 16gb or more memory.</li>
  <li>Ensure you have created the docker secret in both the operator and cluster namespaces.</li>
</ol>

<p>And last but not least, my full kubernetes cluster after install:</p>

<figure>
  <img src="/assets/images/cfm-kubectl-get-pods.png" />
  <figcaption>CFM Operator and NiFi Deployment</figcaption>
</figure>

<p>If you are interested in getting your hands on the NiFi Operators you can find more about Cloudera DataFlow starting right <a href="https://www.cloudera.com/products/dataflow.html">here</a>.</p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="kubernetes" /><category term="operator" /><category term="cfm" /><summary type="html"><![CDATA[Last week I had a chance to work out the installation of the Clouderaâ€™s CFM Operator. In this post I am going to expose the lessons learned and command required to get this CFM Operator running on my macbook with MiniKube. Keep in mind, these Operators are GA for RedHat Openshift. This demonstration on how to locally install is for evaluation purposes and not meant for actual usage.]]></summary></entry><entry><title type="html">Release of Cloudera Kubernetes Operators</title><link href="https://cldr-steven-matison.github.io//blog/Kubernetes-Operator/" rel="alternate" type="text/html" title="Release of Cloudera Kubernetes Operators" /><published>2024-07-18T00:00:00-04:00</published><updated>2024-07-18T00:00:00-04:00</updated><id>https://cldr-steven-matison.github.io//blog/Kubernetes%20Operator</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/Kubernetes-Operator/"><![CDATA[<p>I have been working on so many things related to my CDP Public Cloud and CDP Private Cloud customers that I just do not get enough time to blog.  Since my last post I am happy to report that Cloudera has finally GAâ€™d 3 kubernetes Operators.</p>

<h1 id="cloudera-kubernetes-operators">Cloudera Kubernetes Operators</h1>

<h2 id="cfm---cloudera-flow-management-operator">CFM - Cloudera Flow Management Operator</h2>
<p>Cloudera Flow Management (CFM) Operator allows you to deploy and manage NiFi clusters and NiFi Registry instances on Kubernetes. CFM Operator simplifies data collection, transformation, and delivery across your enterprise. Leveraging containerized infrastructure, the operator streamlines the orchestration of complex data flows.</p>
<ul>
  <li><a href="https://nifi.apache.org/">Apache NiFi</a></li>
</ul>

<h2 id="csm---cloudera-streams-messaging-operator">CSM - Cloudera Streams Messaging Operator</h2>
<p>CSM (Cloudera Streams Messaging) Operator allows you to deploy and manage Streams Messaging components as container applications on Kubernetes. CSM Operator simplifies the process of creating, managing, and troubleshooting Kafka deployments in a Kubernetes environment. CSM Operator includes several services and components such as Strimzi, Kafka, Cruise Control, and others.</p>
<ul>
  <li><a href="https://kafka.apache.org/">Apache Kafka</a></li>
</ul>

<h2 id="csa---cloudera-streams-analytics-operator">CSA - Cloudera Streams Analytics Operator</h2>
<p>Cloudera Streaming Analytics (CSA) Operator allows you to deploy and manage the Streaming Analytics components of Cloudera Data Platform (CDP), Flink and SQL Stream Builder (SSB), as container applications on Kubernetes. CSA Operator is based on the Apache Flink Kubernetes Operator (Flink Operator), and offers the same set of features as the Flink Operator supports. By extending the Kubernetes API, the Flink Operator acts as a control plane to manage the deployment lifecycle of Flink applications using the operator pattern.</p>
<ul>
  <li><a href="https://flink.apache.org/">Apache Flink</a></li>
</ul>

<p>Check out this <a href="https://community.cloudera.com/t5/Community-Articles/Cloudera-Flow-Management-Operator-A-technical-deep-dive/ta-p/390473">Deep Technical Dive with Pierre Villard</a></p>

<p>Find more about Cloudera DataFlow starting right <a href="https://www.cloudera.com/products/dataflow.html">here</a>.</p>

<p>You can learn more about Cloudera Stream Processing right <a href="https://www.cloudera.com/products/stream-processing.html">here</a>.</p>

<p>As always, check out the docs for each operator:</p>

<p><a href="https://docs.cloudera.com/cfm-operator/2.8.0/index.html">CFM</a>
<a href="https://docs.cloudera.com/csm-operator/1.0/index.html">CSM</a>
<a href="https://docs.cloudera.com/csa-operator/1.0/index.html">CSA</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="kubernetes" /><category term="operator" /><category term="csm" /><category term="cfm" /><category term="csa" /><summary type="html"><![CDATA[I have been working on so many things related to my CDP Public Cloud and CDP Private Cloud customers that I just do not get enough time to blog. Since my last post I am happy to report that Cloudera has finally GAâ€™d 3 kubernetes Operators.]]></summary></entry><entry><title type="html">Release of CEM 2.1.2</title><link href="https://cldr-steven-matison.github.io//blog/CEM-2.1.2-Release/" rel="alternate" type="text/html" title="Release of CEM 2.1.2" /><published>2024-03-11T00:00:00-04:00</published><updated>2024-03-11T00:00:00-04:00</updated><id>https://cldr-steven-matison.github.io//blog/CEM-2.1.2-Release</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/CEM-2.1.2-Release/"><![CDATA[<p>Wow I have been so busy I have not had a chance to think about posting here.   Here is a quick release I wanted to share.</p>

<h2 id="release-of-cem-212">Release of CEM 2.1.2</h2>

<p>Key Features</p>

<ol>
  <li>Cloudera Manager integration</li>
  <li>Jetty and Spring upgrades</li>
  <li>Improved EFM caching</li>
  <li>Oracle database support</li>
  <li>Improved import/export functionality</li>
  <li>Agent class delete option</li>
</ol>

<p><a href="https://www.cloudera.com/products/edge-management.html">Cloudera Edge Management CEM</a> is a very useful UI to manage, control and monitor data collection and processing at the edge.  CEM provides two capabilities; Edge Data Collection and Edge Flow Management.</p>

<p>Check out <a href="https://docs.cloudera.com/cem/2.1.2/overview/topics/cem-cem-overview.html">Cloudera Edge Management Overview</a></p>

<p>Check out <a href="https://docs.cloudera.com/cem/2.1.2/release-notes/topics/cem-whats-new.html">Release Notes</a></p>

<p>Check out <a href="https://docs.cloudera.com/cem/2.1.2/release-notes/topics/cem-download-locations.html">Download Information</a>.</p>

<p>As always, check out the docs:</p>

<p><a href="https://docs.cloudera.com/cem/2.1.2/edge-flow-manager.html">Edge Flow Manager Documentation</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="cem" /><category term="nifi" /><category term="minifi" /><summary type="html"><![CDATA[Wow I have been so busy I have not had a chance to think about posting here. Here is a quick release I wanted to share.]]></summary></entry><entry><title type="html">Time Travel with Sql Stream Builder and Iceberg</title><link href="https://cldr-steven-matison.github.io//blog/SSB-Iceberg-Time-Travel/" rel="alternate" type="text/html" title="Time Travel with Sql Stream Builder and Iceberg" /><published>2023-12-05T00:00:00-05:00</published><updated>2023-12-05T00:00:00-05:00</updated><id>https://cldr-steven-matison.github.io//blog/SSB-Iceberg-Time-Travel</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/SSB-Iceberg-Time-Travel/"><![CDATA[<p>I have been working on my <a href="https://github.com/cldr-steven-matison/SSB-Iceberg-Demo">SSB Iceberg Demo</a> for going on 2 months now.  This past week I have had a chance to build out some Iceberg Time Travel capabilities.   I have the code and samples added to my SSB Iceberg Demo but a more interesting time travel story is within the <a href="https://github.com/cldr-steven-matison/Fraud-Prevention-With-Cloudera-SSB">Fraud Detection Demo</a> I have been running.     Letâ€™s take a look at the important details.</p>

<p>First, these are sample queries we can execute in Hue to get snapshot ids, query as of SYSTEM_VERSION, ROLLBACK to a version, and confirm current state of data is from rollback.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">--</span> <span class="nx">Describe</span> <span class="nx">Table</span>
<span class="nx">DESCRIBE</span> <span class="nx">FORMATTED</span> <span class="nx">fraudulent_txn_iceberg</span><span class="p">;</span> 

<span class="o">--</span> <span class="nx">Get</span> <span class="nx">Current</span> <span class="nx">Count</span>
<span class="nx">select</span> <span class="nf">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span>
 <span class="o">--</span> <span class="mi">1456146</span>

<span class="o">--</span> <span class="nx">Get</span> <span class="nx">Snap</span> <span class="nx">Shot</span> <span class="nx">Ids</span>
<span class="nx">DESCRIBE</span> <span class="nx">HISTORY</span> <span class="nx">fraudulent_txn_iceberg</span>
<span class="o">--</span> <span class="nx">copy</span> <span class="mi">2</span> <span class="nx">ids</span><span class="p">,</span>  <span class="nx">one</span> <span class="nx">older</span> <span class="nx">than</span> <span class="nx">the</span> <span class="nx">other</span>

<span class="o">--</span> <span class="nx">Get</span> <span class="nx">Totals</span> <span class="nx">Per</span> <span class="nx">Card</span> <span class="nx">Type</span> <span class="nx">As</span> <span class="k">of</span> <span class="nx">SnapShot</span> <span class="mi">1</span> 
<span class="nx">select</span> <span class="nx">card</span><span class="p">,</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="nx">FOR</span> <span class="nx">SYSTEM_VERSION</span> <span class="nx">AS</span> <span class="nx">OF</span> <span class="mi">2163411949573389139</span> <span class="nx">GROUP</span> <span class="nx">BY</span> <span class="nx">card</span>
  <span class="o">--</span> <span class="nx">mastercard</span>       <span class="mi">103930672</span>
  <span class="o">--</span> <span class="nx">americanexpress</span>  <span class="mi">105070827</span>
  <span class="o">--</span> <span class="nx">visa</span>             <span class="mi">104719497</span>

<span class="o">--</span> <span class="nx">Get</span> <span class="nx">Totals</span> <span class="nx">Per</span> <span class="nx">Card</span> <span class="nx">Type</span> <span class="nx">As</span> <span class="k">of</span> <span class="nx">SnapShot</span> <span class="mi">2</span>
<span class="nx">select</span> <span class="nx">card</span><span class="p">,</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="nx">FOR</span> <span class="nx">SYSTEM_VERSION</span> <span class="nx">AS</span> <span class="nx">OF</span> <span class="mi">2013237884718568734</span> <span class="nx">GROUP</span> <span class="nx">BY</span> <span class="nx">card</span>
  <span class="o">--</span> <span class="nx">mastercard</span>       <span class="mi">116812083</span>
  <span class="o">--</span> <span class="nx">americanexpress</span>  <span class="mi">115538225</span>
  <span class="o">--</span> <span class="nx">visa</span>             <span class="mi">116185432</span>
 
<span class="o">--</span> <span class="nx">Get</span> <span class="nx">Count</span> <span class="k">as</span> <span class="k">of</span> <span class="nx">SnapShot</span> <span class="mi">2</span>  
<span class="nx">select</span> <span class="nf">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="nx">FOR</span> <span class="nx">SYSTEM_VERSION</span> <span class="nx">AS</span> <span class="nx">OF</span> <span class="mi">2013237884718568734</span>  
 <span class="o">--</span> <span class="mi">348732</span>
 
<span class="o">--</span> <span class="nx">Roll</span> <span class="nx">back</span> <span class="nx">to</span> <span class="nx">Snapshot</span> <span class="mi">2</span>
<span class="nx">ALTER</span> <span class="nx">TABLE</span> <span class="nx">fraudulent_txn_iceberg</span>  <span class="nx">EXECUTE</span> <span class="nc">ROLLBACK</span><span class="p">(</span><span class="mi">2013237884718568734</span><span class="p">);</span>

<span class="o">--</span> <span class="nx">Confirm</span> <span class="nx">current</span> <span class="nx">table</span> <span class="nx">Count</span> <span class="nx">is</span> <span class="nx">Correct</span>
<span class="nx">select</span> <span class="nf">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span>
 <span class="o">--</span> <span class="mi">348732</span>
 
<span class="o">--</span> <span class="nx">Show</span> <span class="nx">Database</span> <span class="nx">Totals</span> <span class="nx">match</span> <span class="nx">Query</span> <span class="nx">Line</span> <span class="mi">15</span>
<span class="nx">select</span> <span class="nx">card</span><span class="p">,</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="nx">GROUP</span> <span class="nx">BY</span> <span class="nx">card</span> 
  <span class="o">--</span> <span class="nx">mastercard</span>       <span class="mi">116812083</span>
  <span class="o">--</span> <span class="nx">americanexpress</span>  <span class="mi">115538225</span>
  <span class="o">--</span> <span class="nx">visa</span>             <span class="mi">116185432</span>
</code></pre></div></div>

<p>Next, lets take a look at some Sql Stream Builder queries using the SnapShot Ids to stream from a point in time or stream between a start and end snapshot:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">--</span> <span class="nx">First</span><span class="p">,</span> <span class="kd">get</span> <span class="nx">snapshots</span> <span class="nx">ids</span> <span class="k">for</span> <span class="nx">the</span> <span class="nx">iceberg</span> <span class="nx">table</span>
<span class="cm">/* In hue (hue-impala-iceberg DataWarehouse) execute the following query to get start-snapshot-id report
DESCRIBE HISTORY fraudulent_txn_iceberg; 
*/</span>


<span class="o">--</span> <span class="nx">Next</span><span class="p">,</span> <span class="nx">complete</span> <span class="nx">a</span> <span class="nx">basic</span> <span class="nx">select</span> <span class="kd">with</span> <span class="nx">snapshot</span><span class="o">-</span><span class="nx">id</span>
<span class="nx">select</span> <span class="o">*</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="cm">/*+OPTIONS('snapshot-id'='6619035083895556755')*/</span><span class="p">;</span>

<span class="o">--</span> <span class="nx">Time</span> <span class="nx">travel</span> <span class="mi">1</span> <span class="nx">sec</span> <span class="nx">stream</span> <span class="nx">starting</span> <span class="k">from</span> <span class="nx">snap</span><span class="o">-</span><span class="nx">shot</span><span class="o">-</span><span class="nx">id</span>
<span class="nx">select</span> <span class="o">*</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="cm">/*+OPTIONS('streaming'='true', 'monitor-interval'='1s', 'start-snapshot-id'='4263825941508588099')*/</span><span class="p">;</span>

<span class="o">--</span> <span class="nx">Select</span> <span class="nx">data</span> <span class="k">from</span> <span class="nx">start</span> <span class="nx">snapshot</span> <span class="nx">to</span> <span class="nx">end</span> <span class="nx">snapshot</span>
<span class="nx">select</span> <span class="o">*</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="cm">/*+OPTIONS('start-snapshot-id'='4263825941508588099', 'end-snapshot-id'='3724519465921078641')*/</span><span class="p">;</span>

<span class="o">--</span> <span class="nx">Select</span> <span class="nx">data</span> <span class="k">from</span> <span class="nx">starting</span> <span class="nx">timestamp</span>
<span class="nx">select</span> <span class="o">*</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="cm">/*+OPTIONS('as-of-timestamp'='1699425703000')*/</span><span class="p">;</span>
<span class="o">--</span> <span class="nx">convert</span> <span class="nx">snapshot</span> <span class="nx">history</span> <span class="nx">timestamp</span> <span class="nx">to</span> <span class="nx">unix</span> <span class="nx">time</span> <span class="o">+</span> <span class="mi">000</span> 
</code></pre></div></div>

<p>I think <a href="https://iceberg.apache.org/">Iceberg</a> is pretty cool and it is definitely here to stay.  If you need any more information or help with Cloudera Sql Stream Builder or Iceberg reach out as I am always willing to demo, run a hands on lab, or help you with yours.</p>

<p>Check out Whats New in <a href="https://docs.cloudera.com/cdp-private-cloud-base/7.1.9/runtime-release-notes/topics/rt-pvc-whats-new.html">CDP 7.1.9</a></p>

<p>Check out Whats new in <a href="https://docs.cloudera.com/csa/1.11.0/release-notes/topics/csa-what-new.html">CSA 1.11</a>.</p>

<p>Check out Streaming SQL Console</p>

<p><a href="https://docs.cloudera.com/csa/1.11.0/ssb-overview/topics/csa-ssb-key-features.html">CDP Public Cloud SSB</a></p>

<p>As always, check out the docs:</p>

<p><a href="https://docs.cloudera.com/csa/1.11.0/index.html">Cloudera Streaming Analytics DOCS</a></p>

<p>CDP <a href="https://docs.cloudera.com/csa/1.11.0/ssb-overview/topics/csa-ssb-intro.html">SSB</a> <a href="https://docs.cloudera.com/csa/1.11.0/index.html">CSA</a> <a href="https://flink.apache.org/">Flink</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="ssb" /><category term="iceberg" /><category term="flink" /><summary type="html"><![CDATA[I have been working on my SSB Iceberg Demo for going on 2 months now. This past week I have had a chance to build out some Iceberg Time Travel capabilities. I have the code and samples added to my SSB Iceberg Demo but a more interesting time travel story is within the Fraud Detection Demo I have been running. Letâ€™s take a look at the important details.]]></summary></entry><entry><title type="html">Cloudera SQL Stream Builder Introducing DLQ</title><link href="https://cldr-steven-matison.github.io//blog/SSB-Dead-Letter-Queue/" rel="alternate" type="text/html" title="Cloudera SQL Stream Builder Introducing DLQ" /><published>2023-11-29T00:00:00-05:00</published><updated>2023-11-29T00:00:00-05:00</updated><id>https://cldr-steven-matison.github.io//blog/SSB-Dead-Letter-Queue</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/SSB-Dead-Letter-Queue/"><![CDATA[<p>Yesterday one of my customers asked about the ability to control deserialization errors in SSB applications.  Referencing our <a href="https://docs.cloudera.com/csa/1.11.0/how-to-ssb/topics/csa-ssb-kafka-table-avro-error-handling.html">Dead Letter Queue Documentation</a> within the Deserialize Tab we can see there are quite a few options for exception handling:</p>

<figure>
  <img src="/assets/images/csa-ssb-kafka-configuration-deserialization.png" />
  <figcaption>Deserialization Failure Handler Policy</figcaption>
</figure>

<p>This is actually a very important feature.  In production streaming applications, operators may not have realtime insights into data shapes that do not fit expected schema.  These exceptions need to be trapped versus ignored.   The Dead Letter Queue is how you trap those exceptions in a different Kafka Topic.</p>

<p>Check out this blog that goes into detailed explanation of configuring Dead Letter Queues for your Virtual Kafka Tables.
   <a href="https://blog.cloudera.com/using-dead-letter-queues-with-sql-stream-builder/">Using Dead Letter Queues with Sql Stream Builder</a></p>

<p>Check out Streaming SQL Console:</p>

<p><a href="https://docs.cloudera.com/csa/1.11.0/ssb-overview/topics/csa-ssb-key-features.html">CDP Public Cloud SSB</a></p>

<p>As always, check out the docs:</p>

<p><a href="https://docs.cloudera.com/csa/1.11.0/index.html">Cloudera Streaming Analytics DOCS</a></p>

<p>CDP <a href="https://docs.cloudera.com/csa/1.11.0/ssb-overview/topics/csa-ssb-intro.html">SSB</a> <a href="https://docs.cloudera.com/csa/1.11.0/index.html">CSA</a> <a href="https://flink.apache.org/">Flink</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="ssb" /><category term="cdp" /><category term="flink" /><summary type="html"><![CDATA[Yesterday one of my customers asked about the ability to control deserialization errors in SSB applications. Referencing our Dead Letter Queue Documentation within the Deserialize Tab we can see there are quite a few options for exception handling:]]></summary></entry><entry><title type="html">NiFi 2.0 is Getting Hot</title><link href="https://cldr-steven-matison.github.io//blog/NiFi-2.0/" rel="alternate" type="text/html" title="NiFi 2.0 is Getting Hot" /><published>2023-11-25T00:00:00-05:00</published><updated>2023-11-25T00:00:00-05:00</updated><id>https://cldr-steven-matison.github.io//blog/NiFi-2.0</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/NiFi-2.0/"><![CDATA[<p>NiFi 2.0 is getting closer and closer to a reality as we approach the end of 2023.   Version 2.0.0-M1 was released November 25, 2023 and is the first milestone version of Apache NiFi 2.0.0. This version includes over 900 issues resolved, with new features, numerous improvements, and bug fixes.</p>

<p>Features I am hearing the most about already in the community are:</p>

<ol>
  <li>Initial version of native Python API for Processors</li>
  <li>Stateless Execution mode for Process Groups</li>
  <li>Kubernetes-based Leader Election and State Management extensions</li>
  <li>Python-based Processors for interacting with ChatGPT and Vector Databases</li>
</ol>

<p>To prepare for NiFi Adoption be sure to give a read of Pierre Villardâ€™s blog <a href="https://medium.com/cloudera-inc/getting-ready-for-apache-nifi-2-0-5a5e6a67f450">Getting Ready for NiFi 2.0</a>.</p>

<p>Please refer to the <a href="https://cwiki.apache.org/confluence/display/NIFI/Deprecated+Components+and+Features">Deprecated Components and Features</a> documentation for items removed in this version.</p>

<p><a href="https://cwiki.apache.org/confluence/display/NIFI/Migrating+Deprecated+Components+and+Features+for+2.0.0">Migrating Deprecated Components and Features</a> for 2.0.0 includes current progress on the steps necesary for migrating certain components and features.</p>

<p><a href="https://cwiki.apache.org/confluence/display/NIFI/Release+Notes#ReleaseNotes-Version2.0.0-M1">Release Notes</a></p>

<p><a href="https://cwiki.apache.org/confluence/display/NIFI/Migration+Guidance">Migration Guidance</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="nifi" /><summary type="html"><![CDATA[NiFi 2.0 is getting closer and closer to a reality as we approach the end of 2023. Version 2.0.0-M1 was released November 25, 2023 and is the first milestone version of Apache NiFi 2.0.0. This version includes over 900 issues resolved, with new features, numerous improvements, and bug fixes.]]></summary></entry><entry><title type="html">Cloudera SQL Stream Builder Compatibility between CDP Public Cloud and CDP Private Cloud.</title><link href="https://cldr-steven-matison.github.io//blog/SSB-CDP-PC-PVC-Compatibility/" rel="alternate" type="text/html" title="Cloudera SQL Stream Builder Compatibility between CDP Public Cloud and CDP Private Cloud." /><published>2023-11-02T00:00:00-04:00</published><updated>2023-11-02T00:00:00-04:00</updated><id>https://cldr-steven-matison.github.io//blog/SSB-CDP-PC-PVC-Compatibility</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/SSB-CDP-PC-PVC-Compatibility/"><![CDATA[<p>In my previous post <a href="https://cldr-steven-matison.github.io/blog/SSB-Multi-Project-Repo/">Cloudera SQL Stream Builder Multiple Project Repo</a> I described how I was able to create a separate folder in the project repo to use for a cloud deployment.   That worked great, but I am more happy to report that I was able to remove all the differences so another project folder is not needed.   The SSB-Iceberg-Demo project will now import into any SQL Stream Builder on Private Cloud or Public cloud and not require any modifications to the sample jobs.</p>

<p>A few things to note when deploying on CDP Public Cloud</p>

<ol>
  <li>You need 2 Data Hubs:   <a href="https://docs.cloudera.com/cdf-datahub/7.2.17/concepts-streaming-analytics.html">Streaming Analytics Light Duty with Apache Flink</a> &amp; <a href="https://docs.cloudera.com/cdf-datahub/7.2.17/concepts-streams-messaging.html">Streams Messaging Light Duty: Apache Kafka, Schema Registry, Streams Messaging Manager, Streams Replication Manager, Cruise Control</a></li>
  <li>There are differences in the <a href="https://github.com/cldr-steven-matison/NiFi-Templates/blob/main/SSB-Iceberg-Demo-PC-DataFlow.json">nifi flow</a>.  Those differences are the addition of a Default SSL Context Service.  For my testing I created a DataFlow catalog flow SSB-Iceberg-Demo.  You can deploy the flow in <a href="https://docs.cloudera.com/dataflow/cloud/index.html">DataFlow</a>, in <a href="https://docs.cloudera.com/cdf-datahub/7.2.17/concepts-flow-management.html">DataHub</a>, or any other nifi.</li>
  <li>You can easily complete the keytab setup with your username and password.  Downloading, uploading keytab not required.</li>
  <li>You will need to make a Kafa Data Source against your Kafka Data Hub.  You just need your brokers.</li>
  <li>CDP PC will auto discover your environmentâ€™s services. Check out the <a href="https://docs.cloudera.com/cdf-datahub/7.2.17/how-to-ssb/topics/csa-ssb-auto-discovery.html">Data Hub Service Discovery</a>.</li>
</ol>

<figure>
  <img src="/assets/images/2023-11-03-SSB-Data-Hub-Service-Discovery.png" />
  <figcaption>Data Hub Service Discovery</figcaption>
</figure>

<p>Check out Streaming SQL Console</p>

<p><a href="https://docs.cloudera.com/csa/1.11.0/ssb-overview/topics/csa-ssb-key-features.html">CDP Public Cloud SSB</a></p>

<p>As always, check out the docs:</p>

<p><a href="https://docs.cloudera.com/csa/1.11.0/index.html">Cloudera Streaming Analytics DOCS</a></p>

<p>CDP <a href="https://docs.cloudera.com/csa/1.11.0/ssb-overview/topics/csa-ssb-intro.html">SSB</a> <a href="https://docs.cloudera.com/csa/1.11.0/index.html">CSA</a> <a href="https://flink.apache.org/">Flink</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="ssb" /><category term="cdp" /><category term="flink" /><summary type="html"><![CDATA[In my previous post Cloudera SQL Stream Builder Multiple Project Repo I described how I was able to create a separate folder in the project repo to use for a cloud deployment. That worked great, but I am more happy to report that I was able to remove all the differences so another project folder is not needed. The SSB-Iceberg-Demo project will now import into any SQL Stream Builder on Private Cloud or Public cloud and not require any modifications to the sample jobs.]]></summary></entry><entry><title type="html">Cloudera SQL Stream Builder Multiple Project Repo</title><link href="https://cldr-steven-matison.github.io//blog/SSB-Multi-Project-Repo/" rel="alternate" type="text/html" title="Cloudera SQL Stream Builder Multiple Project Repo" /><published>2023-10-20T00:00:00-04:00</published><updated>2023-10-20T00:00:00-04:00</updated><id>https://cldr-steven-matison.github.io//blog/SSB-Multi-Project-Repo</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/SSB-Multi-Project-Repo/"><![CDATA[<p>I think I am always learning something new with Clouderaâ€™s Flink tool, <a href="https://docs.cloudera.com/csa/1.11.0/ssb-overview/topics/csa-ssb-intro.html">Sql Stream Builder</a>.   I have been demo-ing in it for almost 2 years going back to a <a href="https://github.com/cldr-steven-matison/Fraud-Prevention-With-Cloudera-SSB">Fraud Detection Demo</a> that Andre built, to multiple customer facing POCs, to current releases with Iceberg features for my customers.   Today a lightbulb went off in my head around the Github Source Control Integration and the Project Name.   I tried a commit to create a second project folder within the <a href="https://github.com/cldr-steven-matison/SSBDemo">SSBDemo</a> main repo as such:</p>

<figure>
  <img src="/assets/images/2023-10-20-SSB-Multi-Project-Repo-1.png" />
  <figcaption>Screen Shot of Repo</figcaption>
</figure>

<p>Next, I go into the Streaing SQL Console and Import this Repo as a Project.  This time I choose the SSBDemo-Cloud.</p>

<figure>
  <img src="/assets/images/2023-10-20-SSB-Multi-Project-Repo-2.png" />
  <figcaption>Screen Shot Repot Import</figcaption>
</figure>

<p>And ofcourse, it works.</p>

<figure>
  <img src="/assets/images/2023-10-20-SSB-Multi-Project-Repo-3.png" />
  <figcaption>Screen Shot Import Success</figcaption>
</figure>

<p>I can now use one main repo to host multiple deployments.  In this example, I need some project differences for the CDP Public Cloud version of my projects.  Will expose those differences in future post.</p>

<p>Check out Streaming SQL Console</p>

<p><a href="https://docs.cloudera.com/csa/1.11.0/ssb-overview/topics/csa-ssb-key-features.html">CDP Public Cloud SSB</a></p>

<p>As always, check out the docs:</p>

<p><a href="https://docs.cloudera.com/csa/1.11.0/index.html">Cloudera Streaming Analytics DOCS</a></p>

<p>CDP <a href="https://docs.cloudera.com/csa/1.11.0/ssb-overview/topics/csa-ssb-intro.html">SSB</a> <a href="https://docs.cloudera.com/csa/1.11.0/index.html">CSA</a> <a href="https://flink.apache.org/">Flink</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="ssb" /><category term="cdp" /><category term="flink" /><summary type="html"><![CDATA[I think I am always learning something new with Clouderaâ€™s Flink tool, Sql Stream Builder. I have been demo-ing in it for almost 2 years going back to a Fraud Detection Demo that Andre built, to multiple customer facing POCs, to current releases with Iceberg features for my customers. Today a lightbulb went off in my head around the Github Source Control Integration and the Project Name. I tried a commit to create a second project folder within the SSBDemo main repo as such:]]></summary></entry><entry><title type="html">Cloudera Public Cloud 5 Day Trial</title><link href="https://cldr-steven-matison.github.io//blog/CDP-5-Day-Trial/" rel="alternate" type="text/html" title="Cloudera Public Cloud 5 Day Trial" /><published>2023-10-16T00:00:00-04:00</published><updated>2023-10-16T00:00:00-04:00</updated><id>https://cldr-steven-matison.github.io//blog/CDP-5-Day-Trial</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/CDP-5-Day-Trial/"><![CDATA[<p>I finally got a chance to test out the CDP Data In Motion Trial within Clouderaâ€™s new 5 Day Public Cloud Trial.  I followed the link below and within 24 hours after signing up I got an email with a link to get started.  Three simple clicks later I am logged in to the familiar landing page for Cloudera Public Cloud:</p>

<figure>
  <img src="/assets/images/2023-10-16-cdptrial.png" />
  <figcaption>Cloudera Data Platform Data Services</figcaption>
</figure>

<p>One more click into DataFlow and I have access to all the newest NiFi features:</p>

<ul>
  <li>Deployment Dashboard</li>
  <li>DataFlow Catalog</li>
  <li>ReadyFlow Gallery</li>
  <li>(New) Flow Designer</li>
  <li>(New) DataFlow Functions</li>
</ul>

<figure>
  <img src="/assets/images/2023-10-16-dataflow.png" />
  <figcaption>Cloudera DataFlow Data Service</figcaption>
</figure>

<p>To get started with your free five day trial of CDP Public Cloud DataFlow Data Services follow this link:</p>

<p><a href="https://console.us-west-1.cdp.cloudera.com/trial/register.html#/">CDP Public Cloud 5 Day Trial</a></p>

<p>Here is a guide you can follow as well:</p>

<p><a href="https://github.com/cdp-trial-patterns/data-in-motion">CDP Data In Motion Trial Github</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="nifi" /><summary type="html"><![CDATA[I finally got a chance to test out the CDP Data In Motion Trial within Clouderaâ€™s new 5 Day Public Cloud Trial. I followed the link below and within 24 hours after signing up I got an email with a link to get started. Three simple clicks later I am logged in to the familiar landing page for Cloudera Public Cloud:]]></summary></entry><entry><title type="html">CDP Sql Stream Builder Iceberg Demo</title><link href="https://cldr-steven-matison.github.io//blog/SSB-Iceberg-Demo/" rel="alternate" type="text/html" title="CDP Sql Stream Builder Iceberg Demo" /><published>2023-10-05T00:00:00-04:00</published><updated>2023-10-05T00:00:00-04:00</updated><id>https://cldr-steven-matison.github.io//blog/SSB-Iceberg-Demo</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/SSB-Iceberg-Demo/"><![CDATA[<p><a href="https://docs.cloudera.com/cdp-private-cloud-base/7.1.9/runtime-release-notes/topics/rt-pvc-whats-new.html">CDP 7.1.9</a> came out recently alongside <a href="https://docs.cloudera.com/csa/1.11.0/release-notes/topics/csa-what-new.html">CSA 1.11</a>.  These releases brought some new features around flink and iceberg and I had the opportunity to create a sample project showing the capability.</p>

<p><a href="https://github.com/cldr-steven-matison/SSB-Iceberg-Demo">SSB-Iceberg-Demo</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="ssb" /><summary type="html"><![CDATA[CDP 7.1.9 came out recently alongside CSA 1.11. These releases brought some new features around flink and iceberg and I had the opportunity to create a sample project showing the capability.]]></summary></entry></feed>