<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://cldr-steven-matison.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://cldr-steven-matison.github.io//" rel="alternate" type="text/html" /><updated>2025-01-21T09:55:36-05:00</updated><id>https://cldr-steven-matison.github.io//feed.xml</id><title type="html">Cloudera Solutions Engineer</title><subtitle>Solutions Engineer @Cloudera</subtitle><author><name>Steven Matison</name></author><entry><title type="html">Cloudera Migration Assistant 3.5.0</title><link href="https://cldr-steven-matison.github.io//blog/Cloudera-Migration-Assistant-3.5.0/" rel="alternate" type="text/html" title="Cloudera Migration Assistant 3.5.0" /><published>2025-01-16T00:00:00-05:00</published><updated>2025-01-16T00:00:00-05:00</updated><id>https://cldr-steven-matison.github.io//blog/Cloudera-Migration-Assistant%203.5.0</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/Cloudera-Migration-Assistant-3.5.0/"><![CDATA[<p>Cloudera is excited to announce the General Availability of Cloudera Migration Assistant with the release of the 3.5.0 version. Cloudera’s go-to migration tool now supports migrating Spark2 and Spark3 workloads from Cloudera on premises to Cloudera on cloud, as well as automated execution of migrated workloads with Livy, for a seamless workload migration audit experience.</p>

<p>Cloudera’s vision is to make Cloudera Migration Assistant the de facto standard tool for cloud migration to Cloudera on cloud, enabling a streamlined, assisted, automated experience.</p>

<h1 id="key-features-and-capabilities">Key Features and Capabilities:</h1>

<ul>
  <li>Redesigned Migration View: The main user interface of Cloudera Migration Assistant got a significant update for easier navigation throughout the migration process.</li>
  <li>Automatic Discovery: Cloudera Migration Assistant detects HDFS files as well as HMS and HBase tables in source clusters for a seamless migration setup.</li>
  <li>Workload Identification: Supports migration of SQL, Oozie, and Spark workloads, ensuring comprehensive coverage.</li>
  <li>Dependency Mapping and Planning: Assists in identifying dependencies and planning migration strategies with precision.</li>
  <li>Controlled Execution: Enables managed and observable execution of complex migrations for greater transparency.</li>
  <li>Reduced Manual Effort: Streamlined automation reduces the need for manual intervention, increasing efficiency.</li>
</ul>

<p>Version 3.5.0 introduces new functionalities, implements a more modern architecture, increases product security posture, and adopts a streamlined development process to deliver updates to market more quickly. For organizations looking to migrate from legacy Cloudera Distribution of Hadoop (CDH) or Hortonworks Data Platform (HDP) deployments, version 3.4.1 remains the Cloudera Migration Assistant of choice.</p>

<p>To further explore Cloudera Migration Assistant, check out the resources below.</p>

<p>Check out the <a href="https://docs.cloudera.com/cdp-public-cloud/cloud/cma-cdh-cdppc-migration/topics/cma-tool-overview.html#ariaid-title3">Release Notes</a></p>

<p>As always, check out the entire <a href="https://docs.cloudera.com/cdp-public-cloud/cloud/cma-cdh-cdppc-migration/topics/cma-tool-overview.html#unique_448263855">DOCS</a> for the Cloudera Migration Assistant.</p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="cloudera" /><category term="spark" /><category term="kubernetes" /><category term="cdp" /><summary type="html"><![CDATA[Cloudera is excited to announce the General Availability of Cloudera Migration Assistant with the release of the 3.5.0 version. Cloudera’s go-to migration tool now supports migrating Spark2 and Spark3 workloads from Cloudera on premises to Cloudera on cloud, as well as automated execution of migrated workloads with Livy, for a seamless workload migration audit experience.]]></summary></entry><entry><title type="html">Cloudera Streams Messaging - Kubernetes Operator 1.2</title><link href="https://cldr-steven-matison.github.io//blog/CSM-Kubernetes-Operator1-2-Release/" rel="alternate" type="text/html" title="Cloudera Streams Messaging - Kubernetes Operator 1.2" /><published>2024-12-23T00:00:00-05:00</published><updated>2024-12-23T00:00:00-05:00</updated><id>https://cldr-steven-matison.github.io//blog/CSM-Kubernetes-Operator1-2-Release</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/CSM-Kubernetes-Operator1-2-Release/"><![CDATA[<p>Cloudera’s Data In Motion Team is pleased to announce the release of Cloudera Streams Messaging - Kubernetes Operator 1.2, an integral component of Cloudera Streaming - Kubernetes Operator. With this release, customers receive better security integration and an update to Kafka 3.8, besides other improvements.</p>

<h2 id="release-highlights">Release Highlights</h2>

<ul>
  <li>Rebase on Kafka 3.8:
    <ul>
      <li>For more information, see the Kafka 3.8 <a href="https://archive.apache.org/dist/kafka/3.8.0/RELEASE_NOTES.html">Release Notes</a> and <a href="https://kafka.apache.org/documentation/#upgrade_380_notable">list of notable changes</a>.</li>
    </ul>
  </li>
  <li>Rebase on Strimzi 0.43.0:
    <ul>
      <li>For more information, see the Strimzi 0.43.0 <a href="https://github.com/strimzi/strimzi-kafka-operator/releases/tag/0.43.0">Release Notes</a>.</li>
    </ul>
  </li>
  <li>Apache Ranger authorization: Support for Apache Ranger authorization is now available. Customers can now integrate Kafka clusters, deployed with Cloudera Streams Messaging - Kubernetes Operator, with a remote Ranger service that is running on Cloudera Private Cloud Base. If configured, the Ranger service can provide authorization for your Kafka cluster.
    <ul>
      <li>For more information, see <a href="https://docs.cloudera.com/csm-operator/1.2/kafka-security/topics/csm-op-authz-ranger.html">Apache Ranger authorization</a>.</li>
    </ul>
  </li>
  <li>
    <p>Improvements to Kafka replication: Rebased and backported changes to make Kafka replication more resilient and reliable when handling heartbeats and offset translation.</p>
  </li>
  <li>Performance improvements for the Cloudera diagnostics tool: The report.sh tool, used by clients to provide Cloudera support with key information when dealing with support cases now runs its subprocesses in parallel, accelerating run times.
    <ul>
      <li>For more information, see <a href="https://docs.cloudera.com/csm-operator/1.2/monitoring-diagnostics/topics/csm-op-diagnostics.html">Diagnostics</a>.</li>
    </ul>
  </li>
</ul>

<p>For the complete list of fixes and improvements read these <a href="https://docs.cloudera.com/csm-operator/1.2/release-notes/topics/csm-op-rn.html">Release Notes</a>.</p>

<p>Getting to the new release
To upgrade to Cloudera Streams Messaging - Kubernetes Operator 1.2, check out this <a href="https://docs.cloudera.com/csm-operator/1.2/upgrade/topics/csm-op-upgrade.html">upgrade guide</a>. Please note, if you are installing for the first time use this installation overview.</p>

<h2 id="use-cases">Use Cases</h2>
<ul>
  <li>
    <p>Flexible, agile, and rapid Kafka deployments: Deploy Apache Kafka in seconds on existing Kubernetes infrastructure. Cloudera Streams Messaging - Kubernetes Operator has very lightweight dependencies and system requirements for Kafka-centric deployments. It simplifies and standardizes Kafka deployments and provides auto-scaling support for variable workloads.</p>
  </li>
  <li>
    <p>Operational efficiency with simple upgrades: The complexity of Kafka rolling upgrades is handled by Cloudera Streams Messaging - Kubernetes Operator, making them simpler and safer to execute.</p>
  </li>
  <li>
    <p>Loading and unloading data from Kafka: Kafka Connect gives Kafka users a simple way to access data quickly from a source and feed it to a Kafka topic. It also allows them to get data from a topic and copy it to an external destination. The operator includes Kafka Connect support to give our customers a tool for moving data in and out of Kafka, efficiently.</p>
  </li>
  <li>
    <p>Replicating data to other sites: Disaster resilience is an important aspect of any Kafka production deployment. Cloudera Streams Messaging - Kubernetes Operator supports configuring and running Kafka replication flows across any two Kafka clusters. These clusters could be in the same or in different data centers to provide increased resilience against disasters.</p>
  </li>
  <li>
    <p>Kafka migrations: Customers can migrate or replicate data between containerized Kafka clusters and on-prem or cloud-based clusters.  Using Cloudera Streams Messaging - Kubernetes Operator, data can be replicated in any direction and between two or more clusters at a time.</p>
  </li>
</ul>

<p>Check out what is new in <a href="https://docs.cloudera.com/csm-operator/1.2/release-notes/topics/csm-op-rn.html#ariaid-title2">Cloudera Streams Messaging Kubernetes Operator 1.2</a></p>

<p>Check out <a href="https://docs.cloudera.com/csm-operator/1.2/overview/topics/csm-op-deployment-architecture.html">Deployment Architecture</a></p>

<p>Check out <a href="https://docs.cloudera.com/csm-operator/1.2/installation/topics/csm-op-install-overview.html">Installation Information</a></p>

<p>As always, check out the entire <a href="https://docs.cloudera.com/csm-operator/1.2/index.html">DOCS</a> for the CSM Operator.</p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="csm" /><category term="kafka" /><category term="kubernetes" /><category term="cdp" /><summary type="html"><![CDATA[Cloudera’s Data In Motion Team is pleased to announce the release of Cloudera Streams Messaging - Kubernetes Operator 1.2, an integral component of Cloudera Streaming - Kubernetes Operator. With this release, customers receive better security integration and an update to Kafka 3.8, besides other improvements.]]></summary></entry><entry><title type="html">Cloudera Streaming Analytics 1.14 for Cloudera Data Platform 7.3.1</title><link href="https://cldr-steven-matison.github.io//blog/CSA-1.14-Release/" rel="alternate" type="text/html" title="Cloudera Streaming Analytics 1.14 for Cloudera Data Platform 7.3.1" /><published>2024-12-16T00:00:00-05:00</published><updated>2024-12-16T00:00:00-05:00</updated><id>https://cldr-steven-matison.github.io//blog/CSA-1.14-Release</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/CSA-1.14-Release/"><![CDATA[<p>The Data In Motion team is pleased to announce the release of the Cloudera Streaming Analytics 1.14 for Cloudera Public Cloud and Private Cloud Base 7.3.1. This release includes improvements to SQL Stream Builder as well as updates to Apache Flink 1.19.1. These changes are focused on enhancing the user experience and removing objections and blockers in the sales cycle.</p>

<p>See <a href="https://docs.cloudera.com/csa/latest/release-notes/topics/csa-what-new.html">What’s New</a>.</p>

<h2 id="release-highlights">Release Highlights</h2>
<ul>
  <li>Rebase to Apache Flink 1.19.1: Streaming analytics deployments, including SQL Stream Builder, now support Apache Flink 1.19.1, which includes the Apache Flink improvements below. For more information on these improvements and deprecations, please check the Apache Flink 1.19.1 release announcement.
    <ul>
      <li>Custom Parallelism for Table/SQL Sources: The DataGen connector now supports setting of custom parallelism for performance tuning via the scan.parallelism option. Support for other connectors will come in future releases.</li>
      <li>Configure Different State Time to Live (TTLs) Using SQL Hint: Users have now a more flexible way to specify custom time-to-live (TTL) values for state of regular joins and group aggregations directly within their queries by utilizing the STATE_TTL hint.</li>
      <li>Named Parameters: Named parameters can now be used when calling a function or stored procedure in Flink SQL.</li>
      <li>Support for SESSION Window Table-Valued Functions (TVFs) in Streaming Mode: Users can now use SESSION Window table-valued functions (TVF) in streaming mode.</li>
      <li>Support for Changelog Inputs for Window TVF Aggregation: Window aggregation operators can now handle changelog streams (e.g., Change Data Capture [CDC] data sources, etc.).</li>
      <li>New UDF Type: AsyncScalarFunction: The new AsyncScalarFunction is a user-defined asynchronous ScalarFunction that allows for issuing concurrent function calls asynchronously.</li>
      <li>MiniBatch Optimization for Regular Joins: The new mini-batch optimization can be used in regular joins to reduce intermediate results, especially in cascading join scenarios.</li>
      <li>Dynamic Source Parallelism Inference for Batch Jobs: Allows source connectors to dynamically infer the parallelism based on the actual amount of data to consume.</li>
      <li>Standard Yet Another Markup Language (YAML) for Apache Flink Configuration: Apache Flink has officially introduced full support for the standard YAML 1.2 syntax in the configuration file.</li>
      <li>Profiling JobManager/TaskManager on Apache Flink Web: Support for triggering profiling at the JobManager/TaskManager level.</li>
      <li>New Config Options for Administrator Java Virtual Machine (JVM) Options: A set of administrator JVM options are available to prepend the user-set JVM options with default values for platform-wide JVM tuning.</li>
      <li>Using Larger Checkpointing Interval When Source is Processing Backlog: Users can set the execution.checkpointing.interval-during-backlog to use a larger checkpoint interval to enhance the throughput while the job is processing backlog if the source is backlog-aware.</li>
      <li>CheckpointsCleaner Clean Individual Checkpoint States in Parallel: Now, when disposing of no longer needed checkpoints, every state handle/state file will be disposed in parallel for better performance.</li>
      <li>Trigger Checkpoints through Command Line Client: The command line interface supports triggering a checkpoint manually.</li>
      <li>New Interfaces to SinkV2 That Are Consistent with Source API.</li>
      <li>New Committer Metrics to Track the Status of Committables.</li>
    </ul>
  </li>
  <li>Support for Python User-Defined Functions (UDFs) in SQL Stream Builder: The current Javascript UDFs in SQL Stream Builder will not work in Java 17 and later versions due to the deprecation and removal of the Nashorn engine from the Java Development Kit (JDK). The addition of Python UDFs to SQL Stream Builder will allow customers to use Python to create new UDFs that will continue to be supported on future JDKs. Javascript UDFs are being deprecated in this release and will be removed in a future release. Cloudera recommends that customers start using Python UDFs for all new development and start migrating their JavaScript UDFs to Python UDFs to prepare for future upgrades.</li>
</ul>

<p>Note: Currently, Cloudera Streaming Analytics 1.14 only supports JDK versions 8 and 11.</p>

<ul>
  <li>
    <p>SQL Stream Builder support for load balancing via Knox for HA deployments: Knox now automatically discovers and provides a load balanced endpoint for SQL Stream Builder when multiple instances of the streaming engine are deployed.</p>
  </li>
  <li>
    <p>Global logging configuration for Configuring logs for all SSB jobs: A new global settings view enables default logging configurations to be set by the administrator. These settings will be applied to all streaming jobs by default and can be overridden at the job level. This ensures that a consistent logging standard can be applied by default for all users and developers.</p>
  </li>
</ul>

<p>Please see the <a href="https://docs.cloudera.com/csa/1.14.0/release-notes/topics/csa-what-new.html">Release Notes</a> for the complete list of fixes and improvements.</p>

<h1 id="use-cases">Use Cases</h1>
<ul>
  <li>
    <p>Event-Driven Applications: Stateful applications that ingest events from one or more event streams and react to incoming events by triggering computations, state updates, or external actions.</p>

    <p>Apache Flink excels in handling the concept of time and state for these applications and can scale to manage very large data volumes (up to several terabytes) with exactly once consistency guarantees. Moreover, Apache Flink’s support for event-time, highly customizable window logic, and fine-grained control of time as provided by the ProcessFunction enable the implementation of advanced business logic. Moreover, Apache Flink features a library for Complex Event Processing (CEP) to detect patterns in data streams.</p>

    <p>However, Apache Flink’s outstanding feature for event-driven applications is its support for savepoints. A savepoint is a consistent state image that can be used as a starting point for compatible applications. Given a savepoint, an application can be updated or adapt its scale, or multiple versions of an application can be started for A/B testing.</p>

    <p>Examples:</p>
    <ul>
      <li>Fraud detection</li>
      <li>Anomaly detection</li>
      <li>Rule-based alerting</li>
      <li>Business process monitoring</li>
      <li>Web application (social network)</li>
    </ul>
  </li>
  <li>
    <p>Data Analytics Applications: With a sophisticated stream processing engine, analytics can also be performed in real-time. Streaming queries or applications ingest real-time event streams and continuously produce and update results as events are consumed. The results are written to an external database or maintained as internal state. A dashboard application can read the latest results from the external database or directly query the internal state of the application.</p>

    <p>Apache Flink supports streaming as well as batch analytical applications.</p>

    <p>Examples:</p>
    <ul>
      <li>Quality monitoring of telco networks</li>
      <li>Analysis of product updates &amp; experiment evaluation in mobile applications</li>
      <li>Ad-hoc analysis of live data in consumer technology</li>
      <li>Large-scale graph analysis</li>
    </ul>
  </li>
  <li>
    <p>Data Pipeline Applications: Streaming data pipelines serve a similar purpose as Extract-transform-load (ETL) jobs. They transform and enrich data and can move it from one storage system to another. However, they operate in a continuous streaming mode instead of being periodically triggered. Hence, they can read records from sources that continuously produce data and move it with low latency to their destination.</p>

    <p>Examples:</p>
    <ul>
      <li>Real-time search index building in e-commerce</li>
      <li>Continuous ETL in e-commerce</li>
    </ul>
  </li>
</ul>

<h1 id="getting-to-the-new-release">Getting to the new release</h1>
<p>To upgrade to Cloudera Streaming Analytics 1.14, first ensure that your Cloudera Private Cloud Base environment is already upgraded to version 7.3.1 SP1 and then follow the instructions in the Cloudera Streaming Analytics <a href="https://docs.cloudera.com/csa/1.14.0/installation/topics/csa-upgrade.html">upgrade guide</a>.</p>

<p>Check out <a href="https://docs.cloudera.com/csa/1.14.0/index.html">CSA 1.14</a></p>

<p>Check out <a href="https://docs.cloudera.com/csa/1.14.0/release-notes/topics/csa-what-new.html">Release Notes</a></p>

<p>Check out <a href="https://docs.cloudera.com/csa/1.14.0/download/topics/csa-download-location.html">Download Information</a></p>

<p>As always, check out the <a href="https://docs.cloudera.com/csa/1.14.0/index.html">CSA 1.14 Docs</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="csa" /><category term="flink" /><category term="cdp" /><summary type="html"><![CDATA[The Data In Motion team is pleased to announce the release of the Cloudera Streaming Analytics 1.14 for Cloudera Public Cloud and Private Cloud Base 7.3.1. This release includes improvements to SQL Stream Builder as well as updates to Apache Flink 1.19.1. These changes are focused on enhancing the user experience and removing objections and blockers in the sales cycle.]]></summary></entry><entry><title type="html">Introducing Cloudera’s Unified Runtime with 7.3.1</title><link href="https://cldr-steven-matison.github.io//blog/Cloudera-Unified-Runtime-7.3.1/" rel="alternate" type="text/html" title="Introducing Cloudera’s Unified Runtime with 7.3.1" /><published>2024-12-12T00:00:00-05:00</published><updated>2024-12-12T00:00:00-05:00</updated><id>https://cldr-steven-matison.github.io//blog/Cloudera%20Unified%20Runtime%207.3.1</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/Cloudera-Unified-Runtime-7.3.1/"><![CDATA[<p>We are thrilled to announce Cloudera’s first-ever unified release: Cloudera 7.3.1!  This is a single software release available for both cloud and on-premises environments that enable capabilities, workloads, and governance to work and feel the same everywhere.</p>

<p>With the cohesion of Cloudera on cloud 7.2.18 and Cloudera on premises 7.1.9 into a streamlined 7.3.1 version, customers can now benefit from our accelerated pace of innovation with simpler versioning. This unified release provides a consistent feature set across all deployment environments – whether on-premises or in the cloud.</p>

<p>This milestone release unleashes the power of true hybrid capabilities for data management, enabling data and analytics running on-premises and across multiple clouds to be managed cohesively and federated into a unified whole. Cloudera is the only platform transforming customers’ data management and data journeys by enabling the seamless movement of data and workloads across all environments.</p>

<p><b><i>Welcome to the future of hybrid data solutions with Cloudera!</i></b></p>

<h1 id="release-highlights">Release Highlights:</h1>

<ul>
  <li>
    <p>Hive and Iceberg integration: The integration of Apache Hive with Apache Iceberg brings modern, open-table format capabilities to Hive’s powerful data warehousing features. With increased performance and scalability, Hive users can easily work with large, complex datasets across both cloud and on-premises environments. Iceberg’s support for schema evolution, time travel, and ACID compliance allows Hive users to manage data changes seamlessly and query historical data snapshots without compromising on performance. This powerful combination streamlines data management, enhances flexibility, and opens new doors for efficient data operations in hybrid environments.</p>
  </li>
  <li>
    <p>Graviton support (tech preview): This release supports AWS Graviton processors, allowing our platform to harness the powerful, cost-efficient capabilities of Arm-based EC2 instances. Customers can now achieve up to 40% better price performance for data-intensive workloads, making large-scale data processing both faster and more accessible. Graviton support not only enhances processing speeds and reduces operational costs, but it also aligns with our commitment to flexible, cloud-optimized performance.</p>
  </li>
  <li>
    <p>SQL Assistant:  Hue now leverages Large Language Models (LLMs) to transform data interaction with its SQL AI assistant. Generate SQL queries from natural language, optimize, explain, and fix them effortlessly. Compatible with OpenAI’s GPT, Amazon Bedrock, and Azure’s OpenAI, Hue offers the flexibility to choose the AI service that suits you best.</p>
  </li>
  <li>
    <p>Support for Amazon S3 Express One Zone Storage: Cloud connectors now offer high-performance, single-availability Zone storage with consistent single-digit millisecond access. By storing data in the same Availability Zone as your compute resources, you can optimize performance, reduce costs, and accelerate workloads. This storage class supports hundreds of thousands of requests per second for seamless scalability.</p>
  </li>
  <li>
    <p>Improved security posture: This release addresses 225+ total Common Vulnerabilities and Exposures (CVEs) which reflects our strong commitment to safeguarding data and ensuring a secure, resilient environment for our users. Each CVE resolution bolsters the integrity and stability of our platform, protecting against potential threats across all deployment environments – whether on-premises or in the cloud, or hybrid.</p>
  </li>
</ul>

<h1 id="additional-features">Additional Features:</h1>
<ol>
  <li>Zero Downtime Upgrade (ZDU):  Building on the success of ZDU in version 7.1.9, by supporting ZDU in 7.3.1, we continue to simplify the upgrade process for hassle-free upgrades while maintaining high availability and minimizing disruptions to critical operations.</li>
  <li>Ozone HBase integration (tech preview): This integration provides an object storage solution for Apache HBase. On Ozone, HBase can now efficiently handle massive tables and provide random, realtime read/write access to your Big Data on S3 compliant storage.</li>
  <li>Cloudera Replication Manager Enhancements:
    <ul>
      <li>Advanced Iceberg replication to support Iceberg V2 tables created by Hive, Impala, and Spark</li>
      <li>Atlas Replication (tech preview) allows users to replicate Atlas metadata and data lineage for Hive external tables and Iceberg tables from on-premises to on-premises.</li>
      <li>RM extends ozone replication from data only to metadata; ozone metadata replication can be scheduled via Hive external table replication.</li>
    </ul>
  </li>
  <li>Spark 3 Standardization:  For customers moving from Spark 2, this release simplifies the transition through enhanced tooling to ease the migration process. By upgrading to Spark 3, users can unlock superior performance, better resource utilization, and the ability to seamlessly integrate with modern data and AI workloads across hybrid and multi-cloud environments.</li>
  <li>Unifying Cloudera On Cloud 7.2.18 and Cloudera On-Premises 7.1.9 now ensure feature consistency across deployment environments. For example, multi-authentication support for SAML and LDAP in the Apache Hive component is now available on Cloudera on-premises, while the OpenJPA 3 upgrade for Apache Oozie is now available on Cloudera On Cloud. For a complete list of new features on either platform, please refer to the release notes.</li>
</ol>

<h1 id="multi-python-support">Multi Python Support</h1>
<ul>
  <li>Python 3.9: RHEL/Oracle 8.x, RHEL/Oracle 9.x, and Ubuntu 20.</li>
  <li>Python 3.10: SLES 15 SP4 and SP5, and Ubuntu 22</li>
</ul>

<h1 id="upgrade-paths-to-cloudera-731">Upgrade Paths to Cloudera 7.3.1</h1>
<ul>
  <li>Cloudera on-premise: Direct upgrades (including downgrades and rollbacks) are supported from versions 7.1.9 SP1, 7.1.8, and 7.1.7 SP3.</li>
  <li>Cloudera on Cloud: Direct upgrades are supported from 7.2.18.0, 7.2.18.100, 7.2.18.300, and 7.2.17.200 through 7.2.17.500.</li>
  <li>Upgrades from other versions not listed above may require a two-hop upgrade.</li>
</ul>

<h1 id="operating-system-database-and-jdk-support">Operating System, Database and JDK Support</h1>
<p>RHEL 8.10: The latest release supports RHEL 8.10 for Cloudera on cloud.
JDK 17:  The latest release introduces JDK 17 support for Cloudera on cloud, delivering enhanced performance, security, and compatibility for modern cloud-native applications.
PostgreSQL 14: This support is now present for Cloudera on cloud.</p>

<h1 id="removed-components">Removed Components</h1>
<p>The following components have been removed and are no longer available in Cloudera 7.3.1:</p>
<ul>
  <li>Apache Spark 2 (see <a href="https://docs.cloudera.com/cdp-private-cloud-base/7.1.9/runtime-release-notes/topics/rt-pvc-deprecated-spark2.html">Deprecation notice</a> for Apache Spark 2)</li>
  <li>Apache Livy 2 (see <a href="https://docs.cloudera.com/cdp-private-cloud-base/7.3.1/private-release-notes/topics/rt-deprecated-livy2.html">Deprecation notice</a> for Apache Livy 2)</li>
  <li>Apache Zeppelin (see <a href="https://docs.cloudera.com/cdp-private-cloud-base/7.3.1/private-release-notes/topics/rt-deprecated-livy2.html">Deprecation notice</a> for Apache Zeppelin)</li>
</ul>

<h1 id="cloudera-data-services-on-premises-support">Cloudera Data Services On Premises Support</h1>
<p>Cloudera Data Services on premises are currently not supported with 7.3.1 and support will be coming down the road in subsequent CHFs and service packs.  Customers using Cloudera Data Services on premises are suggested to stay with 7.1.9, as upgrading to 7.3.1 will break compatibility. These customers should upgrade to 7.3.1 at a future date when support is available.</p>

<p>Check out Cloudera Runtime <a href="https://docs.cloudera.com/cdp-private-cloud-base/7.3.1/private-release-notes/topics/rt-runtime-overview.html">Release Notes</a></p>

<p>Check out Public Cloud Runtime <a href="https://docs.cloudera.com/runtime/7.3.1/index.html">Release Notes</a></p>

<p>Check out <a href="https://docs.cloudera.com/cdp-private-cloud-base/7.3.1/private-release-notes/topics/fixed_common_vulnerabilities_exposures_731.html">Fixed CVEs in 7.3.1</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="cloudera" /><category term="cdp" /><summary type="html"><![CDATA[We are thrilled to announce Cloudera’s first-ever unified release: Cloudera 7.3.1! This is a single software release available for both cloud and on-premises environments that enable capabilities, workloads, and governance to work and feel the same everywhere.]]></summary></entry><entry><title type="html">Cloudera Streams Messaging Operator 1.1</title><link href="https://cldr-steven-matison.github.io//blog/Cloudera-Streams-Messaging-Operator-1.1/" rel="alternate" type="text/html" title="Cloudera Streams Messaging Operator 1.1" /><published>2024-09-06T00:00:00-04:00</published><updated>2024-09-06T00:00:00-04:00</updated><id>https://cldr-steven-matison.github.io//blog/Cloudera%20Streams%20Messaging%20Operator%201.1</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/Cloudera-Streams-Messaging-Operator-1.1/"><![CDATA[<p>Moving rapidly here at Cloudera and the Streams Messaging Operator.  Happy to announce the latest release of Cloudera Streams Messaging Operator for Apache Kafka is now ready.   Lots of features including Kafka Replication without Mirrormaker 2.</p>

<p>See <a href="https://docs.cloudera.com/csm-operator/1.1/release-notes/topics/csm-op-rn.html">What’s New</a> with Cloudera Streams Messaging Operator 1.1.</p>

<h1 id="release-of-cloudera-streams-messaging-operator-11">Release of Cloudera Streams Messaging Operator 1.1</h1>

<h2 id="key-features-for-this-release">Key Features For This Release</h2>

<ol>
  <li>Rebase to Strimzi 0.41.0</li>
  <li>Kafka Connect Support</li>
  <li>Kafka Replication Support</li>
</ol>

<p>For a complete list of features, fixes, issues, and unsupported features for this release see the <a href="https://docs.cloudera.com/csm-operator/1.1/release-notes/topics/csm-op-rn.html">Release Notes</a>.</p>

<p>Check out this <a href="https://community.cloudera.com/t5/What-s-New-Cloudera/Cloudera-Streams-Messaging-Operator-1-1/ba-p/393138">Cloudera Community Post</a> from @araujo.</p>

<p>Check out <a href="https://docs.cloudera.com/csm-operator/1.1/installation/topics/csm-op-install-overview.html">Installation Information</a>.</p>

<p>Check out <a href="https://docs.cloudera.com/csm-operator/1.1/upgrade/topics/csm-op-upgrade.html">Upgrade Information</a>.</p>

<p>As always, check out the entire <a href="https://docs.cloudera.com/csm-operator/1.1/index.html">Cloudera Streams Messaging Operator 1.1 Docs</a>.</p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="csm" /><category term="cloudera" /><category term="streams messaging" /><category term="operator" /><summary type="html"><![CDATA[Moving rapidly here at Cloudera and the Streams Messaging Operator. Happy to announce the latest release of Cloudera Streams Messaging Operator for Apache Kafka is now ready. Lots of features including Kafka Replication without Mirrormaker 2.]]></summary></entry><entry><title type="html">Cloudera Streaming Analytics 1.13 for Private Cloud Base</title><link href="https://cldr-steven-matison.github.io//blog/CSA-1.13-Release/" rel="alternate" type="text/html" title="Cloudera Streaming Analytics 1.13 for Private Cloud Base" /><published>2024-08-19T00:00:00-04:00</published><updated>2024-08-19T00:00:00-04:00</updated><id>https://cldr-steven-matison.github.io//blog/CSA-1.13-Release</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/CSA-1.13-Release/"><![CDATA[<p>The Data In Motion team is pleased to announce the release of the Cloudera Streaming Analytics 1.13 for Cloudera Private Cloud Base 7.1.9 SP1. This release includes improvements to SQL Stream Builder as well as updates to Apache Flink 1.19.1. These changes are focused on enhancing the user experience and removing objections and blockers in the sales cycle.</p>

<p>See <a href="https://docs.cloudera.com/csa/latest/release-notes/topics/csa-what-new.html">What’s New</a>.</p>

<h1 id="release-of-csa-113">Release of CSA 1.13</h1>

<h2 id="key-features">Key Features</h2>

<ol>
  <li>Rebase to Apache Flink 1.19.1</li>
  <li>Support for Python UDFs in SSB</li>
  <li>Global logging configuration for SSB jobs</li>
  <li>Customizable default Kafka TrustStore configuration in Streaming SQL Console</li>
  <li>Cloudera LTS Platform Support</li>
</ol>

<p>Check out <a href="https://docs.cloudera.com/csa/1.13.0/index.html">CSA 1.13</a></p>

<p>Check out <a href="https://docs.cloudera.com/csa/1.13.0/release-notes/topics/csa-what-new.html">Release Notes</a></p>

<p>Check out <a href="https://docs.cloudera.com/csa/1.13.0/download/topics/csa-download-location.html">Download Information</a></p>

<p>As always, check out the <a href="https://docs.cloudera.com/csa/1.13.0/index.html">CSA 1.13 Docs</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="csa" /><category term="flink" /><category term="cdp" /><summary type="html"><![CDATA[The Data In Motion team is pleased to announce the release of the Cloudera Streaming Analytics 1.13 for Cloudera Private Cloud Base 7.1.9 SP1. This release includes improvements to SQL Stream Builder as well as updates to Apache Flink 1.19.1. These changes are focused on enhancing the user experience and removing objections and blockers in the sales cycle.]]></summary></entry><entry><title type="html">Installing Cloudera CFM Kubernetes Operator</title><link href="https://cldr-steven-matison.github.io//blog/Install-CFM-Operator/" rel="alternate" type="text/html" title="Installing Cloudera CFM Kubernetes Operator" /><published>2024-08-16T00:00:00-04:00</published><updated>2024-08-16T00:00:00-04:00</updated><id>https://cldr-steven-matison.github.io//blog/Install%20CFM%20Operator</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/Install-CFM-Operator/"><![CDATA[<p>Last week I had a chance to work out the installation of the Cloudera’s CFM Operator.  In this post I am going to expose the lessons learned and command required to get this CFM Operator running on my macbook with <a href="https://minikube.sigs.k8s.io/docs/start/">MiniKube</a>.  Keep in mind, these Operators are GA for RedHat Openshift. This demonstration on how to locally install is for evaluation purposes and not meant for actual usage.</p>

<figure>
  <img src="/assets/images/cfm-op-deployment-architecture.jpg" />
  <figcaption>CFM Deployment Architecture</figcaption>
</figure>

<p>First, lets start with the main page for the CFM Operator:</p>

<p><a href="https://docs.cloudera.com/cfm-operator/2.8.0/index.html">CFM Operator 2.8</a></p>

<p>Next lets take a look at some requirements:</p>

<ol>
  <li>Install Docker</li>
  <li>Install MiniKube</li>
  <li>Install Helm</li>
  <li>Install cfmctl</li>
</ol>

<p>Now, onto the installation pages for detailed steps and instructions:</p>

<ol>
  <li><a href="https://docs.cloudera.com/cfm-operator/2.8.0/installation/topics/cfm-op-install-overview.html">Installing CFM Operator</a></li>
  <li><a href="https://docs.cloudera.com/cfm-operator/2.8.0/nifi-deployment-configuration/topics/cfm-op-deploy-nifi-cluster.html">Installing Apache Nifi</a></li>
  <li><a href="https://docs.cloudera.com/cfm-operator/2.8.0/registry-deployment-configuration/topics/cfm-op-nifi-registry-deployment.html">Installing Apache NiFi Registry</a></li>
</ol>

<p>All the commands for this learning session are as follows:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">minikube</span> <span class="n">start</span>
<span class="n">helm</span> <span class="n">install</span> <span class="p">\\</span>
  <span class="n">cert</span><span class="o">-</span><span class="n">manager</span> <span class="n">jetstack</span><span class="o">/</span><span class="n">cert</span><span class="o">-</span><span class="n">manager</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">namespace</span> <span class="n">cert</span><span class="o">-</span><span class="n">manager</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">create</span><span class="o">-</span><span class="n">namespace</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">version</span> <span class="n">v1</span><span class="o">.</span><span class="mf">15.2</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">set</span> <span class="n">crds</span><span class="p">.</span><span class="nf">enabled</span><span class="o">=</span><span class="kp">true</span>
<span class="n">kubectl</span> <span class="n">create</span> <span class="n">namespace</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="nb">system</span>
<span class="n">kubectl</span> <span class="n">create</span> <span class="n">secret</span> <span class="n">docker</span><span class="o">-</span><span class="n">registry</span> <span class="n">docker</span><span class="o">-</span><span class="n">pull</span><span class="o">-</span><span class="n">secret</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">namespace</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="nb">system</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">docker</span><span class="o">-</span><span class="n">server</span> <span class="n">container</span><span class="p">.</span><span class="nf">repository</span><span class="p">.</span><span class="nf">cloudera</span><span class="p">.</span><span class="nf">com</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">docker</span><span class="o">-</span><span class="n">username</span> <span class="p">[</span><span class="no">License</span> <span class="no">Username</span><span class="p">]</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">docker</span><span class="o">-</span><span class="n">password</span> <span class="p">[</span><span class="no">License</span> <span class="no">Password</span><span class="p">]</span>
<span class="p">.</span><span class="nf">/</span><span class="n">cfmctl</span> <span class="n">install</span> <span class="o">--</span><span class="n">license</span> <span class="p">.</span><span class="nf">/</span><span class="n">license</span><span class="p">.</span><span class="nf">txt</span> <span class="o">--</span><span class="n">image</span><span class="o">-</span><span class="n">repository</span> <span class="s2">"container.repository.cloudera.com/cloudera/cfm-operator"</span> <span class="o">--</span><span class="n">image</span><span class="o">-</span><span class="n">tag</span> <span class="s2">"2.8.0-b94"</span> <span class="o">--</span><span class="n">namespace</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="nb">system</span>
<span class="n">kubectl</span> <span class="n">create</span> <span class="n">namespace</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="n">cluster</span>
<span class="n">kubectl</span> <span class="n">create</span> <span class="n">secret</span> <span class="n">docker</span><span class="o">-</span><span class="n">registry</span> <span class="n">docker</span><span class="o">-</span><span class="n">pull</span><span class="o">-</span><span class="n">secret</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">namespace</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="n">cluster</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">docker</span><span class="o">-</span><span class="n">server</span> <span class="n">container</span><span class="p">.</span><span class="nf">repository</span><span class="p">.</span><span class="nf">cloudera</span><span class="p">.</span><span class="nf">com</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">docker</span><span class="o">-</span><span class="n">username</span> <span class="p">[</span><span class="no">License</span> <span class="no">Username</span><span class="p">]</span> <span class="p">\\</span>
  <span class="o">--</span><span class="n">docker</span><span class="o">-</span><span class="n">password</span> <span class="p">[</span><span class="no">License</span> <span class="no">Password</span><span class="p">]</span>
<span class="n">kubectl</span> <span class="n">apply</span> <span class="o">-</span><span class="n">f</span> <span class="n">nifi</span><span class="p">.</span><span class="nf">yaml</span> <span class="o">--</span><span class="n">namespace</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="n">cluster</span>
</code></pre></div></div>

<p>The source of my nifi.yaml:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="ss">apiVersion: </span><span class="n">cfm</span><span class="p">.</span><span class="nf">cloudera</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">v1alpha1</span>
<span class="ss">kind: </span><span class="no">Nifi</span>
<span class="ss">metadata:
  name: </span><span class="n">mynifi</span>
<span class="ss">spec:
  replicas: </span><span class="mi">1</span>
  <span class="ss">image:
    repository: </span><span class="n">container</span><span class="p">.</span><span class="nf">repository</span><span class="p">.</span><span class="nf">cloudera</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">cloudera</span><span class="o">/</span><span class="n">cfm</span><span class="o">-</span><span class="n">nifi</span><span class="o">-</span><span class="n">k8s</span>
    <span class="ss">tag: </span><span class="mf">2.8</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">b94</span><span class="o">-</span><span class="n">nifi_1</span><span class="o">.</span><span class="mf">25.0</span><span class="o">.</span><span class="mf">2.3</span><span class="o">.</span><span class="mf">13.0</span><span class="o">-</span><span class="mi">36</span>
    <span class="ss">pullSecret: </span><span class="n">docker</span><span class="o">-</span><span class="n">pull</span><span class="o">-</span><span class="n">secret</span>
  <span class="ss">tiniImage:
    repository: </span><span class="n">container</span><span class="p">.</span><span class="nf">repository</span><span class="p">.</span><span class="nf">cloudera</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">cloudera</span><span class="o">/</span><span class="n">cfm</span><span class="o">-</span><span class="n">tini</span>
    <span class="ss">tag: </span><span class="mf">2.8</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">b94</span>
    <span class="ss">pullSecret: </span><span class="n">docker</span><span class="o">-</span><span class="n">pull</span><span class="o">-</span><span class="n">secret</span>
  <span class="ss">hostName: </span><span class="n">mynifi</span><span class="p">.</span><span class="nf">localhost</span>
  <span class="ss">uiConnection:
    type: </span><span class="no">Ingress</span>
  <span class="ss">configOverride:
    nifiProperties:
      upsert:
        </span><span class="n">nifi</span><span class="p">.</span><span class="nf">cluster</span><span class="p">.</span><span class="nf">leader</span><span class="p">.</span><span class="nf">election</span><span class="p">.</span><span class="nf">implementation</span><span class="p">:</span> <span class="s2">"KubernetesLeaderElectionManager"</span>
    <span class="ss">authorizers: </span><span class="o">|</span>
      <span class="o">&lt;</span><span class="n">authorizers</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="n">authorizer</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="n">identifier</span><span class="o">&gt;</span><span class="n">single</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">authorizer</span><span class="o">&lt;</span><span class="sr">/identifier&gt;
          &lt;class&gt;org.apache.nifi.authorization.single.user.SingleUserAuthorizer&lt;/</span><span class="k">class</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="sr">/authorizer&gt;
      &lt;/</span><span class="n">authorizers</span><span class="o">&gt;</span>
    <span class="ss">loginIdentityProviders: </span><span class="o">|</span>
      <span class="o">&lt;</span><span class="n">loginIdentityProviders</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="n">provider</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="n">identifier</span><span class="o">&gt;</span><span class="n">single</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">provider</span><span class="o">&lt;</span><span class="sr">/identifier&gt;
          &lt;class&gt;org.apache.nifi.authentication.single.user.SingleUserLoginIdentityProvider&lt;/</span><span class="k">class</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="n">property</span> <span class="nb">name</span><span class="o">=</span><span class="s2">"Username"</span><span class="o">&gt;</span><span class="n">admin</span><span class="o">&lt;</span><span class="sr">/property&gt;
          &lt;property name="Password"&gt;$2b$10$GRa8g9Z5rBENXPFNHFBosev9XmY6CSk0SdcBi5sQMRX92KD73asGG&lt;/</span><span class="n">property</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="sr">/provider&gt;
      &lt;/</span><span class="n">loginIdentityProviders</span><span class="o">&gt;</span>
  <span class="ss">stateManagement:
   clusterProvider:
     id: </span><span class="n">kubernetes</span><span class="o">-</span><span class="n">provider</span>
     <span class="ss">class: </span><span class="n">org</span><span class="p">.</span><span class="nf">apache</span><span class="p">.</span><span class="nf">nifi</span><span class="p">.</span><span class="nf">kubernetes</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">provider</span><span class="o">.</span><span class="no">KubernetesConfigMapStateProvider</span>

</code></pre></div></div>

<p>Check out some commands I needed to see what was happening during install:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kubectl</span> <span class="n">get</span> <span class="n">pods</span> <span class="o">--</span><span class="n">all</span><span class="o">-</span><span class="n">namespaces</span>
<span class="n">kubectl</span> <span class="n">get</span> <span class="n">pods</span> <span class="o">--</span><span class="n">all</span><span class="o">-</span><span class="n">namespaces</span> <span class="o">-</span><span class="n">o</span> <span class="n">wide</span>
<span class="n">kubectl</span> <span class="n">describe</span> <span class="n">pod</span> <span class="n">mynifi</span><span class="o">-</span><span class="mi">0</span> <span class="o">-</span><span class="n">n</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="n">cluster</span>
<span class="n">kubectl</span> <span class="n">logs</span> <span class="o">-</span><span class="n">n</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="nb">system</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="mi">664598</span><span class="n">bf69</span><span class="o">-</span><span class="n">rm2lx</span>
<span class="n">kubectl</span> <span class="n">get</span> <span class="n">events</span> <span class="o">-</span><span class="n">n</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span>
<span class="n">kubectl</span> <span class="n">get</span> <span class="n">events</span> <span class="o">-</span><span class="n">n</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="nb">system</span>
<span class="n">kubectl</span> <span class="n">get</span> <span class="n">events</span> <span class="o">-</span><span class="n">n</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="n">cluster</span>
<span class="n">kubectl</span> <span class="n">get</span> <span class="n">secrets</span> <span class="o">-</span><span class="n">n</span> <span class="n">cfm</span><span class="o">-</span><span class="n">operator</span><span class="o">-</span><span class="nb">system</span>
</code></pre></div></div>

<p>Things to watch out for:</p>

<ol>
  <li>When copy/pasting commands make sure you fix return lines and \ syntax.</li>
  <li>Be sure to get your correct License Username and Password with proper entitlements for these operators.</li>
  <li>Allocate enough resources for your kubernetes cluster in docker. Recommend 16gb or more memory.</li>
  <li>Ensure you have created the docker secret in both the operator and cluster namespaces.</li>
</ol>

<p>And last but not least, my full kubernetes cluster after install:</p>

<figure>
  <img src="/assets/images/cfm-kubectl-get-pods.png" />
  <figcaption>CFM Operator and NiFi Deployment</figcaption>
</figure>

<p>If you are interested in getting your hands on the NiFi Operators you can find more about Cloudera DataFlow starting right <a href="https://www.cloudera.com/products/dataflow.html">here</a>.</p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="kubernetes" /><category term="operator" /><category term="cfm" /><summary type="html"><![CDATA[Last week I had a chance to work out the installation of the Cloudera’s CFM Operator. In this post I am going to expose the lessons learned and command required to get this CFM Operator running on my macbook with MiniKube. Keep in mind, these Operators are GA for RedHat Openshift. This demonstration on how to locally install is for evaluation purposes and not meant for actual usage.]]></summary></entry><entry><title type="html">Release of Cloudera Kubernetes Operators</title><link href="https://cldr-steven-matison.github.io//blog/Kubernetes-Operator/" rel="alternate" type="text/html" title="Release of Cloudera Kubernetes Operators" /><published>2024-07-18T00:00:00-04:00</published><updated>2024-07-18T00:00:00-04:00</updated><id>https://cldr-steven-matison.github.io//blog/Kubernetes%20Operator</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/Kubernetes-Operator/"><![CDATA[<p>I have been working on so many things related to my CDP Public Cloud and CDP Private Cloud customers that I just do not get enough time to blog.  Since my last post I am happy to report that Cloudera has finally GA’d 3 kubernetes Operators.</p>

<h1 id="cloudera-kubernetes-operators">Cloudera Kubernetes Operators</h1>

<h2 id="cfm---cloudera-flow-management-operator">CFM - Cloudera Flow Management Operator</h2>
<p>Cloudera Flow Management (CFM) Operator allows you to deploy and manage NiFi clusters and NiFi Registry instances on Kubernetes. CFM Operator simplifies data collection, transformation, and delivery across your enterprise. Leveraging containerized infrastructure, the operator streamlines the orchestration of complex data flows.</p>
<ul>
  <li><a href="https://nifi.apache.org/">Apache NiFi</a></li>
</ul>

<h2 id="csm---cloudera-streams-messaging-operator">CSM - Cloudera Streams Messaging Operator</h2>
<p>CSM (Cloudera Streams Messaging) Operator allows you to deploy and manage Streams Messaging components as container applications on Kubernetes. CSM Operator simplifies the process of creating, managing, and troubleshooting Kafka deployments in a Kubernetes environment. CSM Operator includes several services and components such as Strimzi, Kafka, Cruise Control, and others.</p>
<ul>
  <li><a href="https://kafka.apache.org/">Apache Kafka</a></li>
</ul>

<h2 id="csa---cloudera-streams-analytics-operator">CSA - Cloudera Streams Analytics Operator</h2>
<p>Cloudera Streaming Analytics (CSA) Operator allows you to deploy and manage the Streaming Analytics components of Cloudera Data Platform (CDP), Flink and SQL Stream Builder (SSB), as container applications on Kubernetes. CSA Operator is based on the Apache Flink Kubernetes Operator (Flink Operator), and offers the same set of features as the Flink Operator supports. By extending the Kubernetes API, the Flink Operator acts as a control plane to manage the deployment lifecycle of Flink applications using the operator pattern.</p>
<ul>
  <li><a href="https://flink.apache.org/">Apache Flink</a></li>
</ul>

<p>Check out this <a href="https://community.cloudera.com/t5/Community-Articles/Cloudera-Flow-Management-Operator-A-technical-deep-dive/ta-p/390473">Deep Technical Dive with Pierre Villard</a></p>

<p>Find more about Cloudera DataFlow starting right <a href="https://www.cloudera.com/products/dataflow.html">here</a>.</p>

<p>You can learn more about Cloudera Stream Processing right <a href="https://www.cloudera.com/products/stream-processing.html">here</a>.</p>

<p>As always, check out the docs for each operator:</p>

<p><a href="https://docs.cloudera.com/cfm-operator/2.8.0/index.html">CFM</a>
<a href="https://docs.cloudera.com/csm-operator/1.0/index.html">CSM</a>
<a href="https://docs.cloudera.com/csa-operator/1.0/index.html">CSA</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="kubernetes" /><category term="operator" /><category term="csm" /><category term="cfm" /><category term="csa" /><summary type="html"><![CDATA[I have been working on so many things related to my CDP Public Cloud and CDP Private Cloud customers that I just do not get enough time to blog. Since my last post I am happy to report that Cloudera has finally GA’d 3 kubernetes Operators.]]></summary></entry><entry><title type="html">Release of CEM 2.1.2</title><link href="https://cldr-steven-matison.github.io//blog/CEM-2.1.2-Release/" rel="alternate" type="text/html" title="Release of CEM 2.1.2" /><published>2024-03-11T00:00:00-04:00</published><updated>2024-03-11T00:00:00-04:00</updated><id>https://cldr-steven-matison.github.io//blog/CEM-2.1.2-Release</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/CEM-2.1.2-Release/"><![CDATA[<p>Wow I have been so busy I have not had a chance to think about posting here.   Here is a quick release I wanted to share.</p>

<h2 id="release-of-cem-212">Release of CEM 2.1.2</h2>

<p>Key Features</p>

<ol>
  <li>Cloudera Manager integration</li>
  <li>Jetty and Spring upgrades</li>
  <li>Improved EFM caching</li>
  <li>Oracle database support</li>
  <li>Improved import/export functionality</li>
  <li>Agent class delete option</li>
</ol>

<p><a href="https://www.cloudera.com/products/edge-management.html">Cloudera Edge Management CEM</a> is a very useful UI to manage, control and monitor data collection and processing at the edge.  CEM provides two capabilities; Edge Data Collection and Edge Flow Management.</p>

<p>Check out <a href="https://docs.cloudera.com/cem/2.1.2/overview/topics/cem-cem-overview.html">Cloudera Edge Management Overview</a></p>

<p>Check out <a href="https://docs.cloudera.com/cem/2.1.2/release-notes/topics/cem-whats-new.html">Release Notes</a></p>

<p>Check out <a href="https://docs.cloudera.com/cem/2.1.2/release-notes/topics/cem-download-locations.html">Download Information</a>.</p>

<p>As always, check out the docs:</p>

<p><a href="https://docs.cloudera.com/cem/2.1.2/edge-flow-manager.html">Edge Flow Manager Documentation</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="cem" /><category term="nifi" /><category term="minifi" /><summary type="html"><![CDATA[Wow I have been so busy I have not had a chance to think about posting here. Here is a quick release I wanted to share.]]></summary></entry><entry><title type="html">Time Travel with Sql Stream Builder and Iceberg</title><link href="https://cldr-steven-matison.github.io//blog/SSB-Iceberg-Time-Travel/" rel="alternate" type="text/html" title="Time Travel with Sql Stream Builder and Iceberg" /><published>2023-12-05T00:00:00-05:00</published><updated>2023-12-05T00:00:00-05:00</updated><id>https://cldr-steven-matison.github.io//blog/SSB-Iceberg-Time-Travel</id><content type="html" xml:base="https://cldr-steven-matison.github.io//blog/SSB-Iceberg-Time-Travel/"><![CDATA[<p>I have been working on my <a href="https://github.com/cldr-steven-matison/SSB-Iceberg-Demo">SSB Iceberg Demo</a> for going on 2 months now.  This past week I have had a chance to build out some Iceberg Time Travel capabilities.   I have the code and samples added to my SSB Iceberg Demo but a more interesting time travel story is within the <a href="https://github.com/cldr-steven-matison/Fraud-Prevention-With-Cloudera-SSB">Fraud Detection Demo</a> I have been running.     Let’s take a look at the important details.</p>

<p>First, these are sample queries we can execute in Hue to get snapshot ids, query as of SYSTEM_VERSION, ROLLBACK to a version, and confirm current state of data is from rollback.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">--</span> <span class="nx">Describe</span> <span class="nx">Table</span>
<span class="nx">DESCRIBE</span> <span class="nx">FORMATTED</span> <span class="nx">fraudulent_txn_iceberg</span><span class="p">;</span> 

<span class="o">--</span> <span class="nx">Get</span> <span class="nx">Current</span> <span class="nx">Count</span>
<span class="nx">select</span> <span class="nf">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span>
 <span class="o">--</span> <span class="mi">1456146</span>

<span class="o">--</span> <span class="nx">Get</span> <span class="nx">Snap</span> <span class="nx">Shot</span> <span class="nx">Ids</span>
<span class="nx">DESCRIBE</span> <span class="nx">HISTORY</span> <span class="nx">fraudulent_txn_iceberg</span>
<span class="o">--</span> <span class="nx">copy</span> <span class="mi">2</span> <span class="nx">ids</span><span class="p">,</span>  <span class="nx">one</span> <span class="nx">older</span> <span class="nx">than</span> <span class="nx">the</span> <span class="nx">other</span>

<span class="o">--</span> <span class="nx">Get</span> <span class="nx">Totals</span> <span class="nx">Per</span> <span class="nx">Card</span> <span class="nx">Type</span> <span class="nx">As</span> <span class="k">of</span> <span class="nx">SnapShot</span> <span class="mi">1</span> 
<span class="nx">select</span> <span class="nx">card</span><span class="p">,</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="nx">FOR</span> <span class="nx">SYSTEM_VERSION</span> <span class="nx">AS</span> <span class="nx">OF</span> <span class="mi">2163411949573389139</span> <span class="nx">GROUP</span> <span class="nx">BY</span> <span class="nx">card</span>
  <span class="o">--</span> <span class="nx">mastercard</span>       <span class="mi">103930672</span>
  <span class="o">--</span> <span class="nx">americanexpress</span>  <span class="mi">105070827</span>
  <span class="o">--</span> <span class="nx">visa</span>             <span class="mi">104719497</span>

<span class="o">--</span> <span class="nx">Get</span> <span class="nx">Totals</span> <span class="nx">Per</span> <span class="nx">Card</span> <span class="nx">Type</span> <span class="nx">As</span> <span class="k">of</span> <span class="nx">SnapShot</span> <span class="mi">2</span>
<span class="nx">select</span> <span class="nx">card</span><span class="p">,</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="nx">FOR</span> <span class="nx">SYSTEM_VERSION</span> <span class="nx">AS</span> <span class="nx">OF</span> <span class="mi">2013237884718568734</span> <span class="nx">GROUP</span> <span class="nx">BY</span> <span class="nx">card</span>
  <span class="o">--</span> <span class="nx">mastercard</span>       <span class="mi">116812083</span>
  <span class="o">--</span> <span class="nx">americanexpress</span>  <span class="mi">115538225</span>
  <span class="o">--</span> <span class="nx">visa</span>             <span class="mi">116185432</span>
 
<span class="o">--</span> <span class="nx">Get</span> <span class="nx">Count</span> <span class="k">as</span> <span class="k">of</span> <span class="nx">SnapShot</span> <span class="mi">2</span>  
<span class="nx">select</span> <span class="nf">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="nx">FOR</span> <span class="nx">SYSTEM_VERSION</span> <span class="nx">AS</span> <span class="nx">OF</span> <span class="mi">2013237884718568734</span>  
 <span class="o">--</span> <span class="mi">348732</span>
 
<span class="o">--</span> <span class="nx">Roll</span> <span class="nx">back</span> <span class="nx">to</span> <span class="nx">Snapshot</span> <span class="mi">2</span>
<span class="nx">ALTER</span> <span class="nx">TABLE</span> <span class="nx">fraudulent_txn_iceberg</span>  <span class="nx">EXECUTE</span> <span class="nc">ROLLBACK</span><span class="p">(</span><span class="mi">2013237884718568734</span><span class="p">);</span>

<span class="o">--</span> <span class="nx">Confirm</span> <span class="nx">current</span> <span class="nx">table</span> <span class="nx">Count</span> <span class="nx">is</span> <span class="nx">Correct</span>
<span class="nx">select</span> <span class="nf">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span>
 <span class="o">--</span> <span class="mi">348732</span>
 
<span class="o">--</span> <span class="nx">Show</span> <span class="nx">Database</span> <span class="nx">Totals</span> <span class="nx">match</span> <span class="nx">Query</span> <span class="nx">Line</span> <span class="mi">15</span>
<span class="nx">select</span> <span class="nx">card</span><span class="p">,</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="nx">GROUP</span> <span class="nx">BY</span> <span class="nx">card</span> 
  <span class="o">--</span> <span class="nx">mastercard</span>       <span class="mi">116812083</span>
  <span class="o">--</span> <span class="nx">americanexpress</span>  <span class="mi">115538225</span>
  <span class="o">--</span> <span class="nx">visa</span>             <span class="mi">116185432</span>
</code></pre></div></div>

<p>Next, lets take a look at some Sql Stream Builder queries using the SnapShot Ids to stream from a point in time or stream between a start and end snapshot:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">--</span> <span class="nx">First</span><span class="p">,</span> <span class="kd">get</span> <span class="nx">snapshots</span> <span class="nx">ids</span> <span class="k">for</span> <span class="nx">the</span> <span class="nx">iceberg</span> <span class="nx">table</span>
<span class="cm">/* In hue (hue-impala-iceberg DataWarehouse) execute the following query to get start-snapshot-id report
DESCRIBE HISTORY fraudulent_txn_iceberg; 
*/</span>


<span class="o">--</span> <span class="nx">Next</span><span class="p">,</span> <span class="nx">complete</span> <span class="nx">a</span> <span class="nx">basic</span> <span class="nx">select</span> <span class="kd">with</span> <span class="nx">snapshot</span><span class="o">-</span><span class="nx">id</span>
<span class="nx">select</span> <span class="o">*</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="cm">/*+OPTIONS('snapshot-id'='6619035083895556755')*/</span><span class="p">;</span>

<span class="o">--</span> <span class="nx">Time</span> <span class="nx">travel</span> <span class="mi">1</span> <span class="nx">sec</span> <span class="nx">stream</span> <span class="nx">starting</span> <span class="k">from</span> <span class="nx">snap</span><span class="o">-</span><span class="nx">shot</span><span class="o">-</span><span class="nx">id</span>
<span class="nx">select</span> <span class="o">*</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="cm">/*+OPTIONS('streaming'='true', 'monitor-interval'='1s', 'start-snapshot-id'='4263825941508588099')*/</span><span class="p">;</span>

<span class="o">--</span> <span class="nx">Select</span> <span class="nx">data</span> <span class="k">from</span> <span class="nx">start</span> <span class="nx">snapshot</span> <span class="nx">to</span> <span class="nx">end</span> <span class="nx">snapshot</span>
<span class="nx">select</span> <span class="o">*</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="cm">/*+OPTIONS('start-snapshot-id'='4263825941508588099', 'end-snapshot-id'='3724519465921078641')*/</span><span class="p">;</span>

<span class="o">--</span> <span class="nx">Select</span> <span class="nx">data</span> <span class="k">from</span> <span class="nx">starting</span> <span class="nx">timestamp</span>
<span class="nx">select</span> <span class="o">*</span> <span class="k">from</span> <span class="nx">fraudulent_txn_iceberg</span> <span class="cm">/*+OPTIONS('as-of-timestamp'='1699425703000')*/</span><span class="p">;</span>
<span class="o">--</span> <span class="nx">convert</span> <span class="nx">snapshot</span> <span class="nx">history</span> <span class="nx">timestamp</span> <span class="nx">to</span> <span class="nx">unix</span> <span class="nx">time</span> <span class="o">+</span> <span class="mi">000</span> 
</code></pre></div></div>

<p>I think <a href="https://iceberg.apache.org/">Iceberg</a> is pretty cool and it is definitely here to stay.  If you need any more information or help with Cloudera Sql Stream Builder or Iceberg reach out as I am always willing to demo, run a hands on lab, or help you with yours.</p>

<p>Check out Whats New in <a href="https://docs.cloudera.com/cdp-private-cloud-base/7.1.9/runtime-release-notes/topics/rt-pvc-whats-new.html">CDP 7.1.9</a></p>

<p>Check out Whats new in <a href="https://docs.cloudera.com/csa/1.11.0/release-notes/topics/csa-what-new.html">CSA 1.11</a>.</p>

<p>Check out Streaming SQL Console</p>

<p><a href="https://docs.cloudera.com/csa/1.11.0/ssb-overview/topics/csa-ssb-key-features.html">CDP Public Cloud SSB</a></p>

<p>As always, check out the docs:</p>

<p><a href="https://docs.cloudera.com/csa/1.11.0/index.html">Cloudera Streaming Analytics DOCS</a></p>

<p>CDP <a href="https://docs.cloudera.com/csa/1.11.0/ssb-overview/topics/csa-ssb-intro.html">SSB</a> <a href="https://docs.cloudera.com/csa/1.11.0/index.html">CSA</a> <a href="https://flink.apache.org/">Flink</a></p>]]></content><author><name>Steven Matison</name></author><category term="blog" /><category term="ssb" /><category term="iceberg" /><category term="flink" /><summary type="html"><![CDATA[I have been working on my SSB Iceberg Demo for going on 2 months now. This past week I have had a chance to build out some Iceberg Time Travel capabilities. I have the code and samples added to my SSB Iceberg Demo but a more interesting time travel story is within the Fraud Detection Demo I have been running. Let’s take a look at the important details.]]></summary></entry></feed>